/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationsV1AcceptInvite } from "../funcs/organizationsV1AcceptInvite.js";
import { organizationsV1GetOrgMembers } from "../funcs/organizationsV1GetOrgMembers.js";
import { organizationsV1GetOrgPendingInvites } from "../funcs/organizationsV1GetOrgPendingInvites.js";
import { organizationsV1GetOrgs } from "../funcs/organizationsV1GetOrgs.js";
import { organizationsV1GetUsageLimits } from "../funcs/organizationsV1GetUsageLimits.js";
import { organizationsV1GetUserPendingInvites } from "../funcs/organizationsV1GetUserPendingInvites.js";
import { organizationsV1InviteUser } from "../funcs/organizationsV1InviteUser.js";
import { organizationsV1RejectInvite } from "../funcs/organizationsV1RejectInvite.js";
import { organizationsV1RescindInvite } from "../funcs/organizationsV1RescindInvite.js";
import { organizationsV1UpdateUserInvite } from "../funcs/organizationsV1UpdateUserInvite.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class OrganizationsV1 extends ClientSDK {
  /**
   * GetOrgs
   *
   * @remarks
   * Returns an unsorted list of all organizations that you are a member of (an accepted membership invite). An organization is uniquely identified by an `orgId`.
   */
  async getOrgs(
    options?: RequestOptions,
  ): Promise<components.OrgsPage> {
    return unwrapAsync(organizationsV1GetOrgs(
      this,
      options,
    ));
  }

  /**
   * GetUserPendingInvites
   */
  async getUserPendingInvites(
    options?: RequestOptions,
  ): Promise<components.PendingOrgInvitesPage> {
    return unwrapAsync(organizationsV1GetUserPendingInvites(
      this,
      options,
    ));
  }

  /**
   * GetOrgMembers
   */
  async getOrgMembers(
    orgId: string,
    options?: RequestOptions,
  ): Promise<components.OrgMembersPage> {
    return unwrapAsync(organizationsV1GetOrgMembers(
      this,
      orgId,
      options,
    ));
  }

  /**
   * InviteUser
   */
  async inviteUser(
    orgId: string,
    createUserInvite: components.CreateUserInvite,
    options?: RequestOptions,
  ): Promise<components.PendingOrgInvite> {
    return unwrapAsync(organizationsV1InviteUser(
      this,
      orgId,
      createUserInvite,
      options,
    ));
  }

  /**
   * UpdateUserInvite
   */
  async updateUserInvite(
    orgId: string,
    updateUserInvite: components.UpdateUserInvite,
    options?: RequestOptions,
  ): Promise<boolean> {
    return unwrapAsync(organizationsV1UpdateUserInvite(
      this,
      orgId,
      updateUserInvite,
      options,
    ));
  }

  /**
   * RescindInvite
   */
  async rescindInvite(
    orgId: string,
    rescindUserInvite: components.RescindUserInvite,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(organizationsV1RescindInvite(
      this,
      orgId,
      rescindUserInvite,
      options,
    ));
  }

  /**
   * GetOrgPendingInvites
   */
  async getOrgPendingInvites(
    orgId: string,
    options?: RequestOptions,
  ): Promise<components.PendingOrgInvitesPage> {
    return unwrapAsync(organizationsV1GetOrgPendingInvites(
      this,
      orgId,
      options,
    ));
  }

  /**
   * AcceptInvite
   */
  async acceptInvite(
    orgId: string,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(organizationsV1AcceptInvite(
      this,
      orgId,
      options,
    ));
  }

  /**
   * RejectInvite
   */
  async rejectInvite(
    orgId: string,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(organizationsV1RejectInvite(
      this,
      orgId,
      options,
    ));
  }

  /**
   * GetUsageLimits
   */
  async getUsageLimits(
    orgId?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.UsageLimits> {
    return unwrapAsync(organizationsV1GetUsageLimits(
      this,
      orgId,
      options,
    ));
  }
}
