/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { processesV2CreateProcess } from "../funcs/processesV2CreateProcess.js";
import { processesV2GetLatestProcesses } from "../funcs/processesV2GetLatestProcesses.js";
import { processesV2GetProcessInfo } from "../funcs/processesV2GetProcessInfo.js";
import { processesV2StopProcess } from "../funcs/processesV2StopProcess.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ProcessesV2 extends ClientSDK {
    /**
     * Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     */
    async getProcessInfo(
        processId: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.ProcessV2> {
        return unwrapAsync(processesV2GetProcessInfo(this, processId, appId, options));
    }

    /**
     * Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `status` or `region`.
     */
    async getLatestProcesses(
        appId?: string | undefined,
        status?: Array<components.ProcessStatus> | undefined,
        region?: Array<components.Region> | undefined,
        options?: RequestOptions
    ): Promise<Array<components.ProcessV2>> {
        return unwrapAsync(processesV2GetLatestProcesses(this, appId, status, region, options));
    }

    /**
     * Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     */
    async stopProcess(
        processId: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(processesV2StopProcess(this, processId, appId, options));
    }

    /**
     * Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     */
    async createProcess(
        region: components.Region,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.ProcessV2> {
        return unwrapAsync(processesV2CreateProcess(this, region, appId, options));
    }
}
