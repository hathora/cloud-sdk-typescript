/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { buildsV1CreateBuildDeprecated } from "../funcs/buildsV1CreateBuildDeprecated.js";
import { buildsV1DeleteBuildDeprecated } from "../funcs/buildsV1DeleteBuildDeprecated.js";
import { buildsV1GetBuildInfoDeprecated } from "../funcs/buildsV1GetBuildInfoDeprecated.js";
import { buildsV1GetBuildsDeprecated } from "../funcs/buildsV1GetBuildsDeprecated.js";
import { buildsV1RunBuildDeprecated } from "../funcs/buildsV1RunBuildDeprecated.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class BuildsV1 extends ClientSDK {
    /**
     * Returns an array of [builds](https://hathora.dev/docs/concepts/hathora-entities#build) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async getBuildsDeprecated(
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<Array<components.Build>> {
        return unwrapAsync(buildsV1GetBuildsDeprecated(this, appId, options));
    }

    /**
     * Get details for a [build](https://hathora.dev/docs/concepts/hathora-entities#build).
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async getBuildInfoDeprecated(
        buildId: number,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.Build> {
        return unwrapAsync(buildsV1GetBuildInfoDeprecated(this, buildId, appId, options));
    }

    /**
     * Creates a new [build](https://hathora.dev/docs/concepts/hathora-entities#build). Responds with a `buildId` that you must pass to [`RunBuild()`](https://hathora.dev/api#tag/BuildV1/operation/RunBuild) to build the game server artifact. You can optionally pass in a `buildTag` to associate an external version with a build.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async createBuildDeprecated(
        createBuildParams: components.CreateBuildParams,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.Build> {
        return unwrapAsync(buildsV1CreateBuildDeprecated(this, createBuildParams, appId, options));
    }

    /**
     * Delete a [build](https://hathora.dev/docs/concepts/hathora-entities#build). All associated metadata is deleted.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async deleteBuildDeprecated(
        buildId: number,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(buildsV1DeleteBuildDeprecated(this, buildId, appId, options));
    }

    /**
     * Builds a game server artifact from a tarball you provide. Pass in the `buildId` generated from [`CreateBuild()`](https://hathora.dev/api#tag/BuildV1/operation/CreateBuild).
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async runBuildDeprecated(
        buildId: number,
        requestBody: operations.RunBuildDeprecatedRequestBody,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<string> {
        return unwrapAsync(buildsV1RunBuildDeprecated(this, buildId, requestBody, appId, options));
    }
}
