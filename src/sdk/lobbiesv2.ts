/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import { SecurityInput } from "../lib/security";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";
import * as z from "zod";

export class LobbiesV2 extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async createPrivateLobby(
        security: operations.CreatePrivateLobbySecurity,
        requestBody: operations.CreatePrivateLobbyRequestBody,
        appId?: string | undefined,
        roomId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.Lobby> {
        const input$: operations.CreatePrivateLobbyRequest = {
            appId: appId,
            roomId: roomId,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreatePrivateLobbyRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            appId: encodeSimple$("appId", payload$.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/lobby/v2/{appId}/create/private")(pathParams$);

        const query$ = encodeFormQuery$({
            roomId: payload$.roomId,
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.playerAuth,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "CreatePrivateLobby",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = {
            context,
            errorCodes: ["400", "401", "402", "404", "422", "429", "4XX", "500", "5XX"],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Lobby>()
            .json(201, components.Lobby$)
            .json([400, 401, 402, 404, 422, 429, 500], errors.ApiError$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async createPublicLobby(
        security: operations.CreatePublicLobbySecurity,
        requestBody: operations.CreatePublicLobbyRequestBody,
        appId?: string | undefined,
        roomId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.Lobby> {
        const input$: operations.CreatePublicLobbyRequest = {
            appId: appId,
            roomId: roomId,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreatePublicLobbyRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            appId: encodeSimple$("appId", payload$.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/lobby/v2/{appId}/create/public")(pathParams$);

        const query$ = encodeFormQuery$({
            roomId: payload$.roomId,
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.playerAuth,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "CreatePublicLobby",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = {
            context,
            errorCodes: ["400", "401", "402", "404", "422", "429", "4XX", "500", "5XX"],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Lobby>()
            .json(201, components.Lobby$)
            .json([400, 401, 402, 404, 422, 429, 500], errors.ApiError$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async createLocalLobby(
        security: operations.CreateLocalLobbySecurity,
        requestBody: operations.CreateLocalLobbyRequestBody,
        appId?: string | undefined,
        roomId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.Lobby> {
        const input$: operations.CreateLocalLobbyRequest = {
            appId: appId,
            roomId: roomId,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateLocalLobbyRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            appId: encodeSimple$("appId", payload$.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/lobby/v2/{appId}/create/local")(pathParams$);

        const query$ = encodeFormQuery$({
            roomId: payload$.roomId,
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.playerAuth,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "CreateLocalLobby",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = {
            context,
            errorCodes: ["400", "401", "402", "404", "422", "429", "4XX", "500", "5XX"],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Lobby>()
            .json(201, components.Lobby$)
            .json([400, 401, 402, 404, 422, 429, 500], errors.ApiError$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create a new lobby for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). A lobby object is a wrapper around a [room](https://hathora.dev/docs/concepts/hathora-entities#room) object. With a lobby, you get additional functionality like configuring the visibility of the room, managing the state of a match, and retrieving a list of public lobbies to display to players.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async createLobbyDeprecated(
        security: operations.CreateLobbyDeprecatedSecurity,
        createLobbyParams: components.CreateLobbyParams,
        appId?: string | undefined,
        roomId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.Lobby> {
        const input$: operations.CreateLobbyDeprecatedRequest = {
            appId: appId,
            roomId: roomId,
            createLobbyParams: createLobbyParams,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateLobbyDeprecatedRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.CreateLobbyParams, { explode: true });

        const pathParams$ = {
            appId: encodeSimple$("appId", payload$.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/lobby/v2/{appId}/create")(pathParams$);

        const query$ = encodeFormQuery$({
            roomId: payload$.roomId,
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.playerAuth,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "CreateLobbyDeprecated",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = {
            context,
            errorCodes: ["400", "401", "402", "404", "422", "429", "4XX", "500", "5XX"],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Lobby>()
            .json(201, components.Lobby$)
            .json([400, 401, 402, 404, 422, 429, 500], errors.ApiError$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get all active lobbies for a an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a `region`. Use this endpoint to display all public lobbies that a player can join in the game client.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async listActivePublicLobbiesDeprecatedV2(
        appId?: string | undefined,
        region?: components.Region | undefined,
        options?: RequestOptions
    ): Promise<Array<components.Lobby>> {
        const input$: operations.ListActivePublicLobbiesDeprecatedV2Request = {
            appId: appId,
            region: region,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.ListActivePublicLobbiesDeprecatedV2Request$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            appId: encodeSimple$("appId", payload$.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/lobby/v2/{appId}/list/public")(pathParams$);

        const query$ = encodeFormQuery$({
            region: payload$.region,
        });

        const context = {
            operationID: "ListActivePublicLobbiesDeprecatedV2",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<Array<components.Lobby>>()
            .json(200, z.array(components.Lobby$.inboundSchema))
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Get details for a lobby.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async getLobbyInfo(
        roomId: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.Lobby> {
        const input$: operations.GetLobbyInfoRequest = {
            appId: appId,
            roomId: roomId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetLobbyInfoRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            appId: encodeSimple$("appId", payload$.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
            roomId: encodeSimple$("roomId", payload$.roomId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/lobby/v2/{appId}/info/{roomId}")(pathParams$);

        const query$ = "";

        const context = { operationID: "GetLobbyInfo", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Lobby>()
            .json(200, components.Lobby$)
            .json(404, errors.ApiError$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Set the state of a lobby. State is intended to be set by the server and must be smaller than 1MB. Use this endpoint to store match data like live player count to enforce max number of clients or persist end-game data (i.e. winner or final scores).
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async setLobbyState(
        roomId: string,
        setLobbyStateParams: components.SetLobbyStateParams,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<components.Lobby> {
        const input$: operations.SetLobbyStateRequest = {
            appId: appId,
            roomId: roomId,
            setLobbyStateParams: setLobbyStateParams,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.SetLobbyStateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.SetLobbyStateParams, { explode: true });

        const pathParams$ = {
            appId: encodeSimple$("appId", payload$.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
            roomId: encodeSimple$("roomId", payload$.roomId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/lobby/v2/{appId}/setState/{roomId}")(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.hathoraDevToken === "function") {
            security$ = { hathoraDevToken: await this.options$.hathoraDevToken() };
        } else if (this.options$.hathoraDevToken) {
            security$ = { hathoraDevToken: this.options$.hathoraDevToken };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "SetLobbyState",
            oAuth2Scopes: [],
            securitySource: this.options$.hathoraDevToken,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["401", "404", "422", "429", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.Lobby>()
            .json(200, components.Lobby$)
            .json([401, 404, 422, 429], errors.ApiError$, { err: true })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
