/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { billingV1GetBalance } from "../funcs/billingV1GetBalance.js";
import { billingV1GetInvoices } from "../funcs/billingV1GetInvoices.js";
import { billingV1GetPaymentMethod } from "../funcs/billingV1GetPaymentMethod.js";
import { billingV1GetUpcomingInvoiceItems } from "../funcs/billingV1GetUpcomingInvoiceItems.js";
import { billingV1GetUpcomingInvoiceTotal } from "../funcs/billingV1GetUpcomingInvoiceTotal.js";
import { billingV1InitStripeCustomerPortalUrl } from "../funcs/billingV1InitStripeCustomerPortalUrl.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class BillingV1 extends ClientSDK {
  /**
   * GetBalance
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getBalance(
    orgId?: string | undefined,
    options?: RequestOptions,
  ): Promise<number> {
    return unwrapAsync(billingV1GetBalance(
      this,
      orgId,
      options,
    ));
  }

  /**
   * GetUpcomingInvoiceItems
   */
  async getUpcomingInvoiceItems(
    orgId?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.InvoiceItemPage> {
    return unwrapAsync(billingV1GetUpcomingInvoiceItems(
      this,
      orgId,
      options,
    ));
  }

  /**
   * GetUpcomingInvoiceTotal
   */
  async getUpcomingInvoiceTotal(
    orgId?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.GetUpcomingInvoiceTotalResponseBody> {
    return unwrapAsync(billingV1GetUpcomingInvoiceTotal(
      this,
      orgId,
      options,
    ));
  }

  /**
   * GetPaymentMethod
   */
  async getPaymentMethod(
    orgId?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.PaymentMethod> {
    return unwrapAsync(billingV1GetPaymentMethod(
      this,
      orgId,
      options,
    ));
  }

  /**
   * InitStripeCustomerPortalUrl
   */
  async initStripeCustomerPortalUrl(
    customerPortalUrl: components.CustomerPortalUrl,
    orgId?: string | undefined,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(billingV1InitStripeCustomerPortalUrl(
      this,
      customerPortalUrl,
      orgId,
      options,
    ));
  }

  /**
   * GetInvoices
   */
  async getInvoices(
    orgId?: string | undefined,
    options?: RequestOptions,
  ): Promise<Array<components.Invoice>> {
    return unwrapAsync(billingV1GetInvoices(
      this,
      orgId,
      options,
    ));
  }
}
