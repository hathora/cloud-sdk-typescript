/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { HathoraCloudCore } from "../core.js";
import { encodeSimple } from "../lib/encodings.js";
import { readableStreamToArrayBuffer } from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

/**
 * RunBuildV2Deprecated
 *
 * @remarks
 * Builds a game server artifact from a tarball you provide. Pass in the `buildId` generated from [`CreateBuild()`](https://hathora.dev/api#tag/BuildV1/operation/CreateBuild).
 *
 * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export async function buildsV2RunBuildV2Deprecated(
  client: HathoraCloudCore,
  requestBody: operations.RunBuildV2DeprecatedRequestBody,
  buildId: number,
  appId?: string | undefined,
  options?: RequestOptions,
): Promise<
  Result<
    ReadableStream<Uint8Array>,
    | errors.ApiError
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const input: operations.RunBuildV2DeprecatedRequest = {
    requestBody: requestBody,
    buildId: buildId,
    appId: appId,
  };

  const parsed = safeParse(
    input,
    (value) =>
      operations.RunBuildV2DeprecatedRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = new FormData();

  if (payload.RequestBody.file !== undefined) {
    if (isBlobLike(payload.RequestBody.file)) {
      body.append("file", payload.RequestBody.file);
    } else if (isReadableStream(payload.RequestBody.file.content)) {
      const buffer = await readableStreamToArrayBuffer(
        payload.RequestBody.file.content,
      );
      const blob = new Blob([buffer], { type: "application/octet-stream" });
      body.append("file", blob);
    } else {
      body.append(
        "file",
        new Blob([payload.RequestBody.file.content], {
          type: "application/octet-stream",
        }),
        payload.RequestBody.file.fileName,
      );
    }
  }

  const pathParams = {
    appId: encodeSimple("appId", payload.appId ?? client._options.appId, {
      explode: false,
      charEncoding: "percent",
    }),
    buildId: encodeSimple("buildId", payload.buildId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/builds/v2/{appId}/run/{buildId}")(pathParams);

  const headers = new Headers({
    Accept: "application/octet-stream",
  });

  const secConfig = await extractSecurity(client._options.hathoraDevToken);
  const securityInput = secConfig == null ? {} : { hathoraDevToken: secConfig };
  const context = {
    operationID: "RunBuildV2Deprecated",
    oAuth2Scopes: [],
    securitySource: client._options.hathoraDevToken,
  };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "404", "429", "4XX", "500", "5XX"],
    retryConfig: options?.retries
      || client._options.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    ReadableStream<Uint8Array>,
    | errors.ApiError
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.stream(200, z.instanceof(ReadableStream<Uint8Array>)),
    M.jsonErr([400, 401, 404, 429, 500], errors.ApiError$inboundSchema),
    M.fail(["4XX", "5XX"]),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return result;
  }

  return result;
}
