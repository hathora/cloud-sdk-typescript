/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreatePublicLobbyGlobals = {
    appId?: string | undefined;
};

export type CreatePublicLobbySecurity = {
    playerAuth: string;
};

export type CreatePublicLobbyRequestBody = {
    /**
     * User input to initialize the game state. Object must be smaller than 64KB.
     */
    initialConfig?: any | undefined;
    region: components.Region;
};

export type CreatePublicLobbyRequest = {
    appId?: string | undefined;
    roomId?: string | undefined;
    requestBody: CreatePublicLobbyRequestBody;
};

/** @internal */
export namespace CreatePublicLobbyGlobals$ {
    export const inboundSchema: z.ZodType<CreatePublicLobbyGlobals, z.ZodTypeDef, unknown> = z
        .object({
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });

    export type Outbound = {
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePublicLobbyGlobals> = z
        .object({
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });
}

/** @internal */
export namespace CreatePublicLobbySecurity$ {
    export const inboundSchema: z.ZodType<CreatePublicLobbySecurity, z.ZodTypeDef, unknown> = z
        .object({
            playerAuth: z.string(),
        })
        .transform((v) => {
            return {
                playerAuth: v.playerAuth,
            };
        });

    export type Outbound = {
        playerAuth: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePublicLobbySecurity> = z
        .object({
            playerAuth: z.string(),
        })
        .transform((v) => {
            return {
                playerAuth: v.playerAuth,
            };
        });
}

/** @internal */
export namespace CreatePublicLobbyRequestBody$ {
    export const inboundSchema: z.ZodType<CreatePublicLobbyRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            initialConfig: z.any().optional(),
            region: components.Region$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.initialConfig === undefined ? null : { initialConfig: v.initialConfig }),
                region: v.region,
            };
        });

    export type Outbound = {
        initialConfig?: any | undefined;
        region: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePublicLobbyRequestBody> = z
        .object({
            initialConfig: z.any().optional(),
            region: components.Region$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.initialConfig === undefined ? null : { initialConfig: v.initialConfig }),
                region: v.region,
            };
        });
}

/** @internal */
export namespace CreatePublicLobbyRequest$ {
    export const inboundSchema: z.ZodType<CreatePublicLobbyRequest, z.ZodTypeDef, unknown> = z
        .object({
            appId: z.string().optional(),
            roomId: z.string().optional(),
            RequestBody: z.lazy(() => CreatePublicLobbyRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.roomId === undefined ? null : { roomId: v.roomId }),
                requestBody: v.RequestBody,
            };
        });

    export type Outbound = {
        appId?: string | undefined;
        roomId?: string | undefined;
        RequestBody: CreatePublicLobbyRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatePublicLobbyRequest> = z
        .object({
            appId: z.string().optional(),
            roomId: z.string().optional(),
            requestBody: z.lazy(() => CreatePublicLobbyRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.roomId === undefined ? null : { roomId: v.roomId }),
                RequestBody: v.requestBody,
            };
        });
}
