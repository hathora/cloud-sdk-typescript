/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as z from "zod";

export type RunBuildGlobals = {
    appId?: string | undefined;
};

export type RunBuildFile = {
    fileName: string;
    content: Uint8Array | string;
};

export type RunBuildRequestBody = {
    file: RunBuildFile | Blob;
};

export type RunBuildRequest = {
    appId?: string | undefined;
    buildId: number;
    requestBody: RunBuildRequestBody;
};

/** @internal */
export namespace RunBuildGlobals$ {
    export const inboundSchema: z.ZodType<RunBuildGlobals, z.ZodTypeDef, unknown> = z.object({
        appId: z.string().optional(),
    });

    export type Outbound = {
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunBuildGlobals> = z.object({
        appId: z.string().optional(),
    });
}

/** @internal */
export namespace RunBuildFile$ {
    export const inboundSchema: z.ZodType<RunBuildFile, z.ZodTypeDef, unknown> = z.object({
        fileName: z.string(),
        content: b64$.zodInbound,
    });

    export type Outbound = {
        fileName: string;
        content: Uint8Array;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunBuildFile> = z.object({
        fileName: z.string(),
        content: b64$.zodOutbound,
    });
}

/** @internal */
export namespace RunBuildRequestBody$ {
    export const inboundSchema: z.ZodType<RunBuildRequestBody, z.ZodTypeDef, unknown> = z.object({
        file: z.lazy(() => RunBuildFile$.inboundSchema),
    });

    export type Outbound = {
        file: RunBuildFile$.Outbound | Blob;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunBuildRequestBody> = z.object({
        file: z.lazy(() => RunBuildFile$.outboundSchema).or(blobLikeSchema),
    });
}

/** @internal */
export namespace RunBuildRequest$ {
    export const inboundSchema: z.ZodType<RunBuildRequest, z.ZodTypeDef, unknown> = z
        .object({
            appId: z.string().optional(),
            buildId: z.number().int(),
            RequestBody: z.lazy(() => RunBuildRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        appId?: string | undefined;
        buildId: number;
        RequestBody: RunBuildRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunBuildRequest> = z
        .object({
            appId: z.string().optional(),
            buildId: z.number().int(),
            requestBody: z.lazy(() => RunBuildRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}
