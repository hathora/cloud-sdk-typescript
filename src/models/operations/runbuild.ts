/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RunBuildRequest = {
  buildId: string;
  orgId?: string | undefined;
};

/** @internal */
export const RunBuildRequest$inboundSchema: z.ZodType<
  RunBuildRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  buildId: z.string(),
  orgId: z.string().optional(),
});

/** @internal */
export type RunBuildRequest$Outbound = {
  buildId: string;
  orgId?: string | undefined;
};

/** @internal */
export const RunBuildRequest$outboundSchema: z.ZodType<
  RunBuildRequest$Outbound,
  z.ZodTypeDef,
  RunBuildRequest
> = z.object({
  buildId: z.string(),
  orgId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunBuildRequest$ {
  /** @deprecated use `RunBuildRequest$inboundSchema` instead. */
  export const inboundSchema = RunBuildRequest$inboundSchema;
  /** @deprecated use `RunBuildRequest$outboundSchema` instead. */
  export const outboundSchema = RunBuildRequest$outboundSchema;
  /** @deprecated use `RunBuildRequest$Outbound` instead. */
  export type Outbound = RunBuildRequest$Outbound;
}

export function runBuildRequestToJSON(
  runBuildRequest: RunBuildRequest,
): string {
  return JSON.stringify(RunBuildRequest$outboundSchema.parse(runBuildRequest));
}

export function runBuildRequestFromJSON(
  jsonString: string,
): SafeParseResult<RunBuildRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunBuildRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunBuildRequest' from JSON`,
  );
}
