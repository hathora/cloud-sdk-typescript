/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDeploymentsGlobals = {
  appId?: string | undefined;
};

export type GetDeploymentsRequest = {
  appId?: string | undefined;
  deploymentTag?: string | undefined;
  buildTag?: string | undefined;
};

/** @internal */
export const GetDeploymentsGlobals$inboundSchema: z.ZodType<
  GetDeploymentsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
});

/** @internal */
export type GetDeploymentsGlobals$Outbound = {
  appId?: string | undefined;
};

/** @internal */
export const GetDeploymentsGlobals$outboundSchema: z.ZodType<
  GetDeploymentsGlobals$Outbound,
  z.ZodTypeDef,
  GetDeploymentsGlobals
> = z.object({
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentsGlobals$ {
  /** @deprecated use `GetDeploymentsGlobals$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentsGlobals$inboundSchema;
  /** @deprecated use `GetDeploymentsGlobals$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentsGlobals$outboundSchema;
  /** @deprecated use `GetDeploymentsGlobals$Outbound` instead. */
  export type Outbound = GetDeploymentsGlobals$Outbound;
}

export function getDeploymentsGlobalsToJSON(
  getDeploymentsGlobals: GetDeploymentsGlobals,
): string {
  return JSON.stringify(
    GetDeploymentsGlobals$outboundSchema.parse(getDeploymentsGlobals),
  );
}

export function getDeploymentsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentsGlobals' from JSON`,
  );
}

/** @internal */
export const GetDeploymentsRequest$inboundSchema: z.ZodType<
  GetDeploymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
  deploymentTag: z.string().optional(),
  buildTag: z.string().optional(),
});

/** @internal */
export type GetDeploymentsRequest$Outbound = {
  appId?: string | undefined;
  deploymentTag?: string | undefined;
  buildTag?: string | undefined;
};

/** @internal */
export const GetDeploymentsRequest$outboundSchema: z.ZodType<
  GetDeploymentsRequest$Outbound,
  z.ZodTypeDef,
  GetDeploymentsRequest
> = z.object({
  appId: z.string().optional(),
  deploymentTag: z.string().optional(),
  buildTag: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentsRequest$ {
  /** @deprecated use `GetDeploymentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentsRequest$inboundSchema;
  /** @deprecated use `GetDeploymentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentsRequest$outboundSchema;
  /** @deprecated use `GetDeploymentsRequest$Outbound` instead. */
  export type Outbound = GetDeploymentsRequest$Outbound;
}

export function getDeploymentsRequestToJSON(
  getDeploymentsRequest: GetDeploymentsRequest,
): string {
  return JSON.stringify(
    GetDeploymentsRequest$outboundSchema.parse(getDeploymentsRequest),
  );
}

export function getDeploymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentsRequest' from JSON`,
  );
}
