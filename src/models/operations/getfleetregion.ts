/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFleetRegionRequest = {
  fleetId: string;
  region: components.Region;
  orgId?: string | undefined;
};

/** @internal */
export const GetFleetRegionRequest$inboundSchema: z.ZodType<
  GetFleetRegionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fleetId: z.string(),
  region: components.Region$inboundSchema,
  orgId: z.string().optional(),
});

/** @internal */
export type GetFleetRegionRequest$Outbound = {
  fleetId: string;
  region: string;
  orgId?: string | undefined;
};

/** @internal */
export const GetFleetRegionRequest$outboundSchema: z.ZodType<
  GetFleetRegionRequest$Outbound,
  z.ZodTypeDef,
  GetFleetRegionRequest
> = z.object({
  fleetId: z.string(),
  region: components.Region$outboundSchema,
  orgId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFleetRegionRequest$ {
  /** @deprecated use `GetFleetRegionRequest$inboundSchema` instead. */
  export const inboundSchema = GetFleetRegionRequest$inboundSchema;
  /** @deprecated use `GetFleetRegionRequest$outboundSchema` instead. */
  export const outboundSchema = GetFleetRegionRequest$outboundSchema;
  /** @deprecated use `GetFleetRegionRequest$Outbound` instead. */
  export type Outbound = GetFleetRegionRequest$Outbound;
}

export function getFleetRegionRequestToJSON(
  getFleetRegionRequest: GetFleetRegionRequest,
): string {
  return JSON.stringify(
    GetFleetRegionRequest$outboundSchema.parse(getFleetRegionRequest),
  );
}

export function getFleetRegionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFleetRegionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFleetRegionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFleetRegionRequest' from JSON`,
  );
}
