/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SetLobbyStateGlobals = {
  appId?: string | undefined;
};

export type SetLobbyStateRequest = {
  appId?: string | undefined;
  roomId: string;
  setLobbyStateParams: components.SetLobbyStateParams;
};

/** @internal */
export const SetLobbyStateGlobals$inboundSchema: z.ZodType<
  SetLobbyStateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
});

/** @internal */
export type SetLobbyStateGlobals$Outbound = {
  appId?: string | undefined;
};

/** @internal */
export const SetLobbyStateGlobals$outboundSchema: z.ZodType<
  SetLobbyStateGlobals$Outbound,
  z.ZodTypeDef,
  SetLobbyStateGlobals
> = z.object({
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetLobbyStateGlobals$ {
  /** @deprecated use `SetLobbyStateGlobals$inboundSchema` instead. */
  export const inboundSchema = SetLobbyStateGlobals$inboundSchema;
  /** @deprecated use `SetLobbyStateGlobals$outboundSchema` instead. */
  export const outboundSchema = SetLobbyStateGlobals$outboundSchema;
  /** @deprecated use `SetLobbyStateGlobals$Outbound` instead. */
  export type Outbound = SetLobbyStateGlobals$Outbound;
}

export function setLobbyStateGlobalsToJSON(
  setLobbyStateGlobals: SetLobbyStateGlobals,
): string {
  return JSON.stringify(
    SetLobbyStateGlobals$outboundSchema.parse(setLobbyStateGlobals),
  );
}

export function setLobbyStateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<SetLobbyStateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetLobbyStateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetLobbyStateGlobals' from JSON`,
  );
}

/** @internal */
export const SetLobbyStateRequest$inboundSchema: z.ZodType<
  SetLobbyStateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
  roomId: z.string(),
  SetLobbyStateParams: components.SetLobbyStateParams$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SetLobbyStateParams": "setLobbyStateParams",
  });
});

/** @internal */
export type SetLobbyStateRequest$Outbound = {
  appId?: string | undefined;
  roomId: string;
  SetLobbyStateParams: components.SetLobbyStateParams$Outbound;
};

/** @internal */
export const SetLobbyStateRequest$outboundSchema: z.ZodType<
  SetLobbyStateRequest$Outbound,
  z.ZodTypeDef,
  SetLobbyStateRequest
> = z.object({
  appId: z.string().optional(),
  roomId: z.string(),
  setLobbyStateParams: components.SetLobbyStateParams$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    setLobbyStateParams: "SetLobbyStateParams",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetLobbyStateRequest$ {
  /** @deprecated use `SetLobbyStateRequest$inboundSchema` instead. */
  export const inboundSchema = SetLobbyStateRequest$inboundSchema;
  /** @deprecated use `SetLobbyStateRequest$outboundSchema` instead. */
  export const outboundSchema = SetLobbyStateRequest$outboundSchema;
  /** @deprecated use `SetLobbyStateRequest$Outbound` instead. */
  export type Outbound = SetLobbyStateRequest$Outbound;
}

export function setLobbyStateRequestToJSON(
  setLobbyStateRequest: SetLobbyStateRequest,
): string {
  return JSON.stringify(
    SetLobbyStateRequest$outboundSchema.parse(setLobbyStateRequest),
  );
}

export function setLobbyStateRequestFromJSON(
  jsonString: string,
): SafeParseResult<SetLobbyStateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetLobbyStateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetLobbyStateRequest' from JSON`,
  );
}
