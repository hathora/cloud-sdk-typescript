/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type LoginNicknameRequest = {
    nicknameObject: components.NicknameObject;
    appId?: string | undefined;
};

/** @internal */
export namespace LoginNicknameRequest$ {
    export type Inbound = {
        NicknameObject: components.NicknameObject$.Inbound;
        appId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<LoginNicknameRequest, z.ZodTypeDef, Inbound> = z
        .object({
            NicknameObject: components.NicknameObject$.inboundSchema,
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                nicknameObject: v.NicknameObject,
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });

    export type Outbound = {
        NicknameObject: components.NicknameObject$.Outbound;
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginNicknameRequest> = z
        .object({
            nicknameObject: components.NicknameObject$.outboundSchema,
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                NicknameObject: v.nicknameObject,
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });
}
