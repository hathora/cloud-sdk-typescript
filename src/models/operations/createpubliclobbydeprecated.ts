/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreatePublicLobbyDeprecatedSecurity = {
    playerAuth: string;
};

export type CreatePublicLobbyDeprecatedRequest = {
    appId?: string | undefined;
    region?: components.Region | undefined;
    local?: boolean | undefined;
};

/** @internal */
export namespace CreatePublicLobbyDeprecatedSecurity$ {
    export type Inbound = {
        playerAuth: string;
    };

    export const inboundSchema: z.ZodType<
        CreatePublicLobbyDeprecatedSecurity,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            playerAuth: z.string(),
        })
        .transform((v) => {
            return {
                playerAuth: v.playerAuth,
            };
        });

    export type Outbound = {
        playerAuth: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreatePublicLobbyDeprecatedSecurity
    > = z
        .object({
            playerAuth: z.string(),
        })
        .transform((v) => {
            return {
                playerAuth: v.playerAuth,
            };
        });
}

/** @internal */
export namespace CreatePublicLobbyDeprecatedRequest$ {
    export type Inbound = {
        appId?: string | undefined;
        region?: components.Region | undefined;
        local?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        CreatePublicLobbyDeprecatedRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            appId: z.string().optional(),
            region: components.Region$.optional(),
            local: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.region === undefined ? null : { region: v.region }),
                local: v.local,
            };
        });

    export type Outbound = {
        appId?: string | undefined;
        region?: components.Region | undefined;
        local: boolean;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreatePublicLobbyDeprecatedRequest
    > = z
        .object({
            appId: z.string().optional(),
            region: components.Region$.optional(),
            local: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.region === undefined ? null : { region: v.region }),
                local: v.local,
            };
        });
}
