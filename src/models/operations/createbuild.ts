/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type CreateBuildRequest = {
  orgId?: string | undefined;
  createMultipartBuildParams: components.CreateMultipartBuildParams;
};

/** @internal */
export const CreateBuildRequest$inboundSchema: z.ZodType<
  CreateBuildRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  orgId: z.string().optional(),
  CreateMultipartBuildParams:
    components.CreateMultipartBuildParams$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateMultipartBuildParams": "createMultipartBuildParams",
  });
});

/** @internal */
export type CreateBuildRequest$Outbound = {
  orgId?: string | undefined;
  CreateMultipartBuildParams: components.CreateMultipartBuildParams$Outbound;
};

/** @internal */
export const CreateBuildRequest$outboundSchema: z.ZodType<
  CreateBuildRequest$Outbound,
  z.ZodTypeDef,
  CreateBuildRequest
> = z.object({
  orgId: z.string().optional(),
  createMultipartBuildParams:
    components.CreateMultipartBuildParams$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createMultipartBuildParams: "CreateMultipartBuildParams",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBuildRequest$ {
  /** @deprecated use `CreateBuildRequest$inboundSchema` instead. */
  export const inboundSchema = CreateBuildRequest$inboundSchema;
  /** @deprecated use `CreateBuildRequest$outboundSchema` instead. */
  export const outboundSchema = CreateBuildRequest$outboundSchema;
  /** @deprecated use `CreateBuildRequest$Outbound` instead. */
  export type Outbound = CreateBuildRequest$Outbound;
}
