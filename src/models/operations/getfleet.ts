/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFleetGlobals = {
  orgId?: string | undefined;
};

export type GetFleetRequest = {
  fleetId: string;
  orgId?: string | undefined;
};

/** @internal */
export const GetFleetGlobals$inboundSchema: z.ZodType<
  GetFleetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  orgId: z.string().optional(),
});

/** @internal */
export type GetFleetGlobals$Outbound = {
  orgId?: string | undefined;
};

/** @internal */
export const GetFleetGlobals$outboundSchema: z.ZodType<
  GetFleetGlobals$Outbound,
  z.ZodTypeDef,
  GetFleetGlobals
> = z.object({
  orgId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFleetGlobals$ {
  /** @deprecated use `GetFleetGlobals$inboundSchema` instead. */
  export const inboundSchema = GetFleetGlobals$inboundSchema;
  /** @deprecated use `GetFleetGlobals$outboundSchema` instead. */
  export const outboundSchema = GetFleetGlobals$outboundSchema;
  /** @deprecated use `GetFleetGlobals$Outbound` instead. */
  export type Outbound = GetFleetGlobals$Outbound;
}

export function getFleetGlobalsToJSON(
  getFleetGlobals: GetFleetGlobals,
): string {
  return JSON.stringify(GetFleetGlobals$outboundSchema.parse(getFleetGlobals));
}

export function getFleetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetFleetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFleetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFleetGlobals' from JSON`,
  );
}

/** @internal */
export const GetFleetRequest$inboundSchema: z.ZodType<
  GetFleetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fleetId: z.string(),
  orgId: z.string().optional(),
});

/** @internal */
export type GetFleetRequest$Outbound = {
  fleetId: string;
  orgId?: string | undefined;
};

/** @internal */
export const GetFleetRequest$outboundSchema: z.ZodType<
  GetFleetRequest$Outbound,
  z.ZodTypeDef,
  GetFleetRequest
> = z.object({
  fleetId: z.string(),
  orgId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFleetRequest$ {
  /** @deprecated use `GetFleetRequest$inboundSchema` instead. */
  export const inboundSchema = GetFleetRequest$inboundSchema;
  /** @deprecated use `GetFleetRequest$outboundSchema` instead. */
  export const outboundSchema = GetFleetRequest$outboundSchema;
  /** @deprecated use `GetFleetRequest$Outbound` instead. */
  export type Outbound = GetFleetRequest$Outbound;
}

export function getFleetRequestToJSON(
  getFleetRequest: GetFleetRequest,
): string {
  return JSON.stringify(GetFleetRequest$outboundSchema.parse(getFleetRequest));
}

export function getFleetRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFleetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFleetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFleetRequest' from JSON`,
  );
}
