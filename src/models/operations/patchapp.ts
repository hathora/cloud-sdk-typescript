/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchAppGlobals = {
  appId?: string | undefined;
};

export type PatchAppRequest = {
  appId?: string | undefined;
  partialAppConfigWithServiceConfig:
    components.PartialAppConfigWithServiceConfig;
};

/** @internal */
export const PatchAppGlobals$inboundSchema: z.ZodType<
  PatchAppGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
});

/** @internal */
export type PatchAppGlobals$Outbound = {
  appId?: string | undefined;
};

/** @internal */
export const PatchAppGlobals$outboundSchema: z.ZodType<
  PatchAppGlobals$Outbound,
  z.ZodTypeDef,
  PatchAppGlobals
> = z.object({
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchAppGlobals$ {
  /** @deprecated use `PatchAppGlobals$inboundSchema` instead. */
  export const inboundSchema = PatchAppGlobals$inboundSchema;
  /** @deprecated use `PatchAppGlobals$outboundSchema` instead. */
  export const outboundSchema = PatchAppGlobals$outboundSchema;
  /** @deprecated use `PatchAppGlobals$Outbound` instead. */
  export type Outbound = PatchAppGlobals$Outbound;
}

export function patchAppGlobalsToJSON(
  patchAppGlobals: PatchAppGlobals,
): string {
  return JSON.stringify(PatchAppGlobals$outboundSchema.parse(patchAppGlobals));
}

export function patchAppGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<PatchAppGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchAppGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchAppGlobals' from JSON`,
  );
}

/** @internal */
export const PatchAppRequest$inboundSchema: z.ZodType<
  PatchAppRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
  Partial_AppConfigWithServiceConfig_:
    components.PartialAppConfigWithServiceConfig$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Partial_AppConfigWithServiceConfig_": "partialAppConfigWithServiceConfig",
  });
});

/** @internal */
export type PatchAppRequest$Outbound = {
  appId?: string | undefined;
  Partial_AppConfigWithServiceConfig_:
    components.PartialAppConfigWithServiceConfig$Outbound;
};

/** @internal */
export const PatchAppRequest$outboundSchema: z.ZodType<
  PatchAppRequest$Outbound,
  z.ZodTypeDef,
  PatchAppRequest
> = z.object({
  appId: z.string().optional(),
  partialAppConfigWithServiceConfig:
    components.PartialAppConfigWithServiceConfig$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    partialAppConfigWithServiceConfig: "Partial_AppConfigWithServiceConfig_",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchAppRequest$ {
  /** @deprecated use `PatchAppRequest$inboundSchema` instead. */
  export const inboundSchema = PatchAppRequest$inboundSchema;
  /** @deprecated use `PatchAppRequest$outboundSchema` instead. */
  export const outboundSchema = PatchAppRequest$outboundSchema;
  /** @deprecated use `PatchAppRequest$Outbound` instead. */
  export type Outbound = PatchAppRequest$Outbound;
}

export function patchAppRequestToJSON(
  patchAppRequest: PatchAppRequest,
): string {
  return JSON.stringify(PatchAppRequest$outboundSchema.parse(patchAppRequest));
}

export function patchAppRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchAppRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchAppRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchAppRequest' from JSON`,
  );
}
