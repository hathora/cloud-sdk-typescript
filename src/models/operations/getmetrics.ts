/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetMetricsGlobals = {
    appId?: string | undefined;
};

export type GetMetricsRequest = {
    appId?: string | undefined;
    processId: string;
    /**
     * Available metrics to query over time.
     */
    metrics?: Array<components.MetricName> | undefined;
    /**
     * Unix timestamp. Default is current time.
     */
    end?: number | undefined;
    /**
     * Unix timestamp. Default is -1 hour from `end`.
     */
    start?: number | undefined;
    step?: number | undefined;
};

/** @internal */
export namespace GetMetricsGlobals$ {
    export const inboundSchema: z.ZodType<GetMetricsGlobals, z.ZodTypeDef, unknown> = z
        .object({
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });

    export type Outbound = {
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetricsGlobals> = z
        .object({
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });
}

/** @internal */
export namespace GetMetricsRequest$ {
    export const inboundSchema: z.ZodType<GetMetricsRequest, z.ZodTypeDef, unknown> = z
        .object({
            appId: z.string().optional(),
            processId: z.string(),
            metrics: z.array(components.MetricName$.inboundSchema).optional(),
            end: z.number().optional(),
            start: z.number().optional(),
            step: z.number().int().default(60),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                processId: v.processId,
                ...(v.metrics === undefined ? null : { metrics: v.metrics }),
                ...(v.end === undefined ? null : { end: v.end }),
                ...(v.start === undefined ? null : { start: v.start }),
                step: v.step,
            };
        });

    export type Outbound = {
        appId?: string | undefined;
        processId: string;
        metrics?: Array<string> | undefined;
        end?: number | undefined;
        start?: number | undefined;
        step: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetricsRequest> = z
        .object({
            appId: z.string().optional(),
            processId: z.string(),
            metrics: z.array(components.MetricName$.outboundSchema).optional(),
            end: z.number().optional(),
            start: z.number().optional(),
            step: z.number().int().default(60),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                processId: v.processId,
                ...(v.metrics === undefined ? null : { metrics: v.metrics }),
                ...(v.end === undefined ? null : { end: v.end }),
                ...(v.start === undefined ? null : { start: v.start }),
                step: v.step,
            };
        });
}
