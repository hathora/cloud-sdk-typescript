/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type RejectInviteRequest = {
    orgId: string;
};

export type RejectInviteResponse = {};

/** @internal */
export namespace RejectInviteRequest$ {
    export type Inbound = {
        orgId: string;
    };

    export const inboundSchema: z.ZodType<RejectInviteRequest, z.ZodTypeDef, Inbound> = z
        .object({
            orgId: z.string(),
        })
        .transform((v) => {
            return {
                orgId: v.orgId,
            };
        });

    export type Outbound = {
        orgId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RejectInviteRequest> = z
        .object({
            orgId: z.string(),
        })
        .transform((v) => {
            return {
                orgId: v.orgId,
            };
        });
}

/** @internal */
export namespace RejectInviteResponse$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<RejectInviteResponse, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RejectInviteResponse> = z.object(
        {}
    );
}
