/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import * as z from "zod";

/**
 * Transport type specifies the underlying communication protocol to the exposed port.
 */
export const TransportType = {
    Tcp: "tcp",
    Udp: "udp",
    Tls: "tls",
} as const;
/**
 * Transport type specifies the underlying communication protocol to the exposed port.
 */
export type TransportType = OpenEnum<typeof TransportType>;

/** @internal */
export const TransportType$inboundSchema: z.ZodType<TransportType, z.ZodTypeDef, unknown> = z.union(
    [z.nativeEnum(TransportType), z.string().transform(catchUnrecognizedEnum)]
);

/** @internal */
export const TransportType$outboundSchema: z.ZodType<TransportType, z.ZodTypeDef, TransportType> =
    z.union([z.nativeEnum(TransportType), z.string().and(z.custom<Unrecognized<string>>())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransportType$ {
    /** @deprecated use `TransportType$inboundSchema` instead. */
    export const inboundSchema = TransportType$inboundSchema;
    /** @deprecated use `TransportType$outboundSchema` instead. */
    export const outboundSchema = TransportType$outboundSchema;
}
