/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import * as z from "zod";

export const BuildStatus = {
    Created: "created",
    Running: "running",
    Succeeded: "succeeded",
    Failed: "failed",
} as const;
export type BuildStatus = OpenEnum<typeof BuildStatus>;

/** @internal */
export const BuildStatus$inboundSchema: z.ZodType<BuildStatus, z.ZodTypeDef, unknown> = z.union([
    z.nativeEnum(BuildStatus),
    z.string().transform(catchUnrecognizedEnum),
]);

/** @internal */
export const BuildStatus$outboundSchema: z.ZodType<BuildStatus, z.ZodTypeDef, BuildStatus> =
    z.union([z.nativeEnum(BuildStatus), z.string().and(z.custom<Unrecognized<string>>())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuildStatus$ {
    /** @deprecated use `BuildStatus$inboundSchema` instead. */
    export const inboundSchema = BuildStatus$inboundSchema;
    /** @deprecated use `BuildStatus$outboundSchema` instead. */
    export const outboundSchema = BuildStatus$outboundSchema;
}
