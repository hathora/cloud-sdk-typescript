/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ContainerPort, ContainerPort$ } from "./containerport";
import { TransportType, TransportType$ } from "./transporttype";
import * as z from "zod";

export type DeploymentConfigV2Env = {
    value: string;
    name: string;
};

export type DeploymentConfigV2 = {
    /**
     * Option to shut down processes that have had no new connections or rooms
     *
     * @remarks
     * for five minutes.
     */
    idleTimeoutEnabled: boolean;
    /**
     * The environment variable that our process will have access to at runtime.
     */
    env: Array<DeploymentConfigV2Env>;
    /**
     * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
     */
    roomsPerProcess: number;
    /**
     * Additional ports your server listens on.
     */
    additionalContainerPorts?: Array<ContainerPort> | undefined;
    /**
     * Transport type specifies the underlying communication protocol to the exposed port.
     */
    transportType: TransportType;
    /**
     * Default port the server listens on.
     */
    containerPort: number;
    /**
     * The amount of memory allocated to your process.
     */
    requestedMemoryMB: number;
    /**
     * The number of cores allocated to your process.
     */
    requestedCPU: number;
};

/** @internal */
export namespace DeploymentConfigV2Env$ {
    export const inboundSchema: z.ZodType<DeploymentConfigV2Env, z.ZodTypeDef, unknown> = z
        .object({
            value: z.string(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                value: v.value,
                name: v.name,
            };
        });

    export type Outbound = {
        value: string;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeploymentConfigV2Env> = z
        .object({
            value: z.string(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                value: v.value,
                name: v.name,
            };
        });
}

/** @internal */
export namespace DeploymentConfigV2$ {
    export const inboundSchema: z.ZodType<DeploymentConfigV2, z.ZodTypeDef, unknown> = z
        .object({
            idleTimeoutEnabled: z.boolean(),
            env: z.array(z.lazy(() => DeploymentConfigV2Env$.inboundSchema)),
            roomsPerProcess: z.number().int(),
            additionalContainerPorts: z.array(ContainerPort$.inboundSchema).optional(),
            transportType: TransportType$.inboundSchema,
            containerPort: z.number().int(),
            requestedMemoryMB: z.number(),
            requestedCPU: z.number(),
        })
        .transform((v) => {
            return {
                idleTimeoutEnabled: v.idleTimeoutEnabled,
                env: v.env,
                roomsPerProcess: v.roomsPerProcess,
                ...(v.additionalContainerPorts === undefined
                    ? null
                    : { additionalContainerPorts: v.additionalContainerPorts }),
                transportType: v.transportType,
                containerPort: v.containerPort,
                requestedMemoryMB: v.requestedMemoryMB,
                requestedCPU: v.requestedCPU,
            };
        });

    export type Outbound = {
        idleTimeoutEnabled: boolean;
        env: Array<DeploymentConfigV2Env$.Outbound>;
        roomsPerProcess: number;
        additionalContainerPorts?: Array<ContainerPort$.Outbound> | undefined;
        transportType: string;
        containerPort: number;
        requestedMemoryMB: number;
        requestedCPU: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeploymentConfigV2> = z
        .object({
            idleTimeoutEnabled: z.boolean(),
            env: z.array(z.lazy(() => DeploymentConfigV2Env$.outboundSchema)),
            roomsPerProcess: z.number().int(),
            additionalContainerPorts: z.array(ContainerPort$.outboundSchema).optional(),
            transportType: TransportType$.outboundSchema,
            containerPort: z.number().int(),
            requestedMemoryMB: z.number(),
            requestedCPU: z.number(),
        })
        .transform((v) => {
            return {
                idleTimeoutEnabled: v.idleTimeoutEnabled,
                env: v.env,
                roomsPerProcess: v.roomsPerProcess,
                ...(v.additionalContainerPorts === undefined
                    ? null
                    : { additionalContainerPorts: v.additionalContainerPorts }),
                transportType: v.transportType,
                containerPort: v.containerPort,
                requestedMemoryMB: v.requestedMemoryMB,
                requestedCPU: v.requestedCPU,
            };
        });
}
