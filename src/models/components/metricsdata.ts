/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  MetricValue,
  MetricValue$inboundSchema,
  MetricValue$Outbound,
  MetricValue$outboundSchema,
} from "./metricvalue.js";

export type MetricsData = {
  activeConnections?: Array<MetricValue> | undefined;
  totalEgress?: Array<MetricValue> | undefined;
  rateEgress?: Array<MetricValue> | undefined;
  memory?: Array<MetricValue> | undefined;
  cpu?: Array<MetricValue> | undefined;
};

/** @internal */
export const MetricsData$inboundSchema: z.ZodType<
  MetricsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  active_connections: z.array(MetricValue$inboundSchema).optional(),
  total_egress: z.array(MetricValue$inboundSchema).optional(),
  rate_egress: z.array(MetricValue$inboundSchema).optional(),
  memory: z.array(MetricValue$inboundSchema).optional(),
  cpu: z.array(MetricValue$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "active_connections": "activeConnections",
    "total_egress": "totalEgress",
    "rate_egress": "rateEgress",
  });
});

/** @internal */
export type MetricsData$Outbound = {
  active_connections?: Array<MetricValue$Outbound> | undefined;
  total_egress?: Array<MetricValue$Outbound> | undefined;
  rate_egress?: Array<MetricValue$Outbound> | undefined;
  memory?: Array<MetricValue$Outbound> | undefined;
  cpu?: Array<MetricValue$Outbound> | undefined;
};

/** @internal */
export const MetricsData$outboundSchema: z.ZodType<
  MetricsData$Outbound,
  z.ZodTypeDef,
  MetricsData
> = z.object({
  activeConnections: z.array(MetricValue$outboundSchema).optional(),
  totalEgress: z.array(MetricValue$outboundSchema).optional(),
  rateEgress: z.array(MetricValue$outboundSchema).optional(),
  memory: z.array(MetricValue$outboundSchema).optional(),
  cpu: z.array(MetricValue$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    activeConnections: "active_connections",
    totalEgress: "total_egress",
    rateEgress: "rate_egress",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsData$ {
  /** @deprecated use `MetricsData$inboundSchema` instead. */
  export const inboundSchema = MetricsData$inboundSchema;
  /** @deprecated use `MetricsData$outboundSchema` instead. */
  export const outboundSchema = MetricsData$outboundSchema;
  /** @deprecated use `MetricsData$Outbound` instead. */
  export type Outbound = MetricsData$Outbound;
}
