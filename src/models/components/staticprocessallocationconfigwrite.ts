/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Region,
  Region$inboundSchema,
  Region$outboundSchema,
} from "./region.js";

export type StaticProcessAllocationConfigWrite = {
  /**
   * Whether autoscaling is enabled in this region. When enabled, `targetProcesses` is managed by the Process Autoscaler
   *
   * @remarks
   * in accordance with the `processAutoscalerConfig` field set on the application's `serviceConfig`.
   * There MUST be a `processAutoscalerConfig` for the application in order to enable autoscaling.
   * EXPERIMENTAL - this feature is in closed beta.
   */
  autoscalingEnabled?: boolean | undefined;
  /**
   * The maximum number of running processes.
   *
   * @remarks
   * When maxProcesses is null, will be set to a system-defined maximum value.
   */
  maxProcesses: number | null;
  /**
   * The target number of running processes.
   *
   * @remarks
   * When using process autoscaling, targetProcesses MUST NOT be set in this object.
   * targetProcesses will be managed by the ProcessAutoscaler
   */
  targetProcesses?: number | undefined;
  /**
   * The minimum number of running processes.
   *
   * @remarks
   * Invariant: 0 <= minProcesses < targetProcesses
   */
  minProcesses: number;
  region: Region;
};

/** @internal */
export const StaticProcessAllocationConfigWrite$inboundSchema: z.ZodType<
  StaticProcessAllocationConfigWrite,
  z.ZodTypeDef,
  unknown
> = z.object({
  autoscalingEnabled: z.boolean().optional(),
  maxProcesses: z.nullable(z.number().int()),
  targetProcesses: z.number().int().optional(),
  minProcesses: z.number().int(),
  region: Region$inboundSchema,
});

/** @internal */
export type StaticProcessAllocationConfigWrite$Outbound = {
  autoscalingEnabled?: boolean | undefined;
  maxProcesses: number | null;
  targetProcesses?: number | undefined;
  minProcesses: number;
  region: string;
};

/** @internal */
export const StaticProcessAllocationConfigWrite$outboundSchema: z.ZodType<
  StaticProcessAllocationConfigWrite$Outbound,
  z.ZodTypeDef,
  StaticProcessAllocationConfigWrite
> = z.object({
  autoscalingEnabled: z.boolean().optional(),
  maxProcesses: z.nullable(z.number().int()),
  targetProcesses: z.number().int().optional(),
  minProcesses: z.number().int(),
  region: Region$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StaticProcessAllocationConfigWrite$ {
  /** @deprecated use `StaticProcessAllocationConfigWrite$inboundSchema` instead. */
  export const inboundSchema = StaticProcessAllocationConfigWrite$inboundSchema;
  /** @deprecated use `StaticProcessAllocationConfigWrite$outboundSchema` instead. */
  export const outboundSchema =
    StaticProcessAllocationConfigWrite$outboundSchema;
  /** @deprecated use `StaticProcessAllocationConfigWrite$Outbound` instead. */
  export type Outbound = StaticProcessAllocationConfigWrite$Outbound;
}

export function staticProcessAllocationConfigWriteToJSON(
  staticProcessAllocationConfigWrite: StaticProcessAllocationConfigWrite,
): string {
  return JSON.stringify(
    StaticProcessAllocationConfigWrite$outboundSchema.parse(
      staticProcessAllocationConfigWrite,
    ),
  );
}

export function staticProcessAllocationConfigWriteFromJSON(
  jsonString: string,
): SafeParseResult<StaticProcessAllocationConfigWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      StaticProcessAllocationConfigWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StaticProcessAllocationConfigWrite' from JSON`,
  );
}
