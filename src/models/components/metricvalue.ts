/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MetricValue = {
  value: number;
  timestamp: number;
};

/** @internal */
export const MetricValue$inboundSchema: z.ZodType<
  MetricValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.number(),
  timestamp: z.number(),
});

/** @internal */
export type MetricValue$Outbound = {
  value: number;
  timestamp: number;
};

/** @internal */
export const MetricValue$outboundSchema: z.ZodType<
  MetricValue$Outbound,
  z.ZodTypeDef,
  MetricValue
> = z.object({
  value: z.number(),
  timestamp: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricValue$ {
  /** @deprecated use `MetricValue$inboundSchema` instead. */
  export const inboundSchema = MetricValue$inboundSchema;
  /** @deprecated use `MetricValue$outboundSchema` instead. */
  export const outboundSchema = MetricValue$outboundSchema;
  /** @deprecated use `MetricValue$Outbound` instead. */
  export type Outbound = MetricValue$Outbound;
}

export function metricValueToJSON(metricValue: MetricValue): string {
  return JSON.stringify(MetricValue$outboundSchema.parse(metricValue));
}

export function metricValueFromJSON(
  jsonString: string,
): SafeParseResult<MetricValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricValue' from JSON`,
  );
}
