/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LobbyVisibility,
  LobbyVisibility$inboundSchema,
  LobbyVisibility$outboundSchema,
} from "./lobbyvisibility.js";
import {
  Region,
  Region$inboundSchema,
  Region$outboundSchema,
} from "./region.js";

/**
 * UserId or email address for the user that created the lobby.
 */
export type LobbyV3CreatedBy = string | number;

/**
 * A lobby object allows you to store and manage metadata for your rooms.
 */
export type LobbyV3 = {
  /**
   * User-defined identifier for a lobby.
   */
  shortCode: string;
  /**
   * When the lobby was created.
   */
  createdAt: Date;
  /**
   * UserId or email address for the user that created the lobby.
   */
  createdBy: string | number;
  roomConfig?: string | null | undefined;
  /**
   * Types of lobbies a player can create.
   *
   * @remarks
   *
   * `private`: the player who created the room must share the roomId with their friends
   *
   * `public`: visible in the public lobby list, anyone can join
   *
   * `local`: for testing with a server running locally
   */
  visibility: LobbyVisibility;
  region: Region;
  /**
   * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
   *
   * @remarks
   * Note: error will be returned if `roomId` is not globally unique.
   */
  roomId: string;
  /**
   * System generated unique identifier for an application.
   */
  appId: string;
};

/** @internal */
export const LobbyV3CreatedBy$inboundSchema: z.ZodType<
  LobbyV3CreatedBy,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type LobbyV3CreatedBy$Outbound = string | number;

/** @internal */
export const LobbyV3CreatedBy$outboundSchema: z.ZodType<
  LobbyV3CreatedBy$Outbound,
  z.ZodTypeDef,
  LobbyV3CreatedBy
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LobbyV3CreatedBy$ {
  /** @deprecated use `LobbyV3CreatedBy$inboundSchema` instead. */
  export const inboundSchema = LobbyV3CreatedBy$inboundSchema;
  /** @deprecated use `LobbyV3CreatedBy$outboundSchema` instead. */
  export const outboundSchema = LobbyV3CreatedBy$outboundSchema;
  /** @deprecated use `LobbyV3CreatedBy$Outbound` instead. */
  export type Outbound = LobbyV3CreatedBy$Outbound;
}

export function lobbyV3CreatedByToJSON(
  lobbyV3CreatedBy: LobbyV3CreatedBy,
): string {
  return JSON.stringify(
    LobbyV3CreatedBy$outboundSchema.parse(lobbyV3CreatedBy),
  );
}

export function lobbyV3CreatedByFromJSON(
  jsonString: string,
): SafeParseResult<LobbyV3CreatedBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LobbyV3CreatedBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LobbyV3CreatedBy' from JSON`,
  );
}

/** @internal */
export const LobbyV3$inboundSchema: z.ZodType<LobbyV3, z.ZodTypeDef, unknown> =
  z.object({
    shortCode: z.string(),
    createdAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    createdBy: z.union([z.string(), z.number()]),
    roomConfig: z.nullable(z.string()).optional(),
    visibility: LobbyVisibility$inboundSchema,
    region: Region$inboundSchema,
    roomId: z.string(),
    appId: z.string(),
  });

/** @internal */
export type LobbyV3$Outbound = {
  shortCode: string;
  createdAt: string;
  createdBy: string | number;
  roomConfig?: string | null | undefined;
  visibility: string;
  region: string;
  roomId: string;
  appId: string;
};

/** @internal */
export const LobbyV3$outboundSchema: z.ZodType<
  LobbyV3$Outbound,
  z.ZodTypeDef,
  LobbyV3
> = z.object({
  shortCode: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  createdBy: z.union([z.string(), z.number()]),
  roomConfig: z.nullable(z.string()).optional(),
  visibility: LobbyVisibility$outboundSchema,
  region: Region$outboundSchema,
  roomId: z.string(),
  appId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LobbyV3$ {
  /** @deprecated use `LobbyV3$inboundSchema` instead. */
  export const inboundSchema = LobbyV3$inboundSchema;
  /** @deprecated use `LobbyV3$outboundSchema` instead. */
  export const outboundSchema = LobbyV3$outboundSchema;
  /** @deprecated use `LobbyV3$Outbound` instead. */
  export type Outbound = LobbyV3$Outbound;
}

export function lobbyV3ToJSON(lobbyV3: LobbyV3): string {
  return JSON.stringify(LobbyV3$outboundSchema.parse(lobbyV3));
}

export function lobbyV3FromJSON(
  jsonString: string,
): SafeParseResult<LobbyV3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LobbyV3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LobbyV3' from JSON`,
  );
}
