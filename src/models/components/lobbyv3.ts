/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LobbyVisibility, LobbyVisibility$ } from "./lobbyvisibility";
import { Region, Region$ } from "./region";
import * as z from "zod";

/**
 * A lobby object allows you to store and manage metadata for your rooms.
 */
export type LobbyV3 = {
    /**
     * User-defined identifier for a lobby.
     */
    shortCode: string;
    /**
     * When the lobby was created.
     */
    createdAt: Date;
    /**
     * UserId or email address for the user that created the lobby.
     */
    createdBy: string;
    roomConfig: string | null;
    /**
     * Types of lobbies a player can create.
     *
     * @remarks
     *
     * `private`: the player who created the room must share the roomId with their friends
     *
     * `public`: visible in the public lobby list, anyone can join
     *
     * `local`: for testing with a server running locally
     */
    visibility: LobbyVisibility;
    region: Region;
    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     *
     * @remarks
     * Note: error will be returned if `roomId` is not globally unique.
     */
    roomId: string;
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
};

/** @internal */
export namespace LobbyV3$ {
    export type Inbound = {
        shortCode: string;
        createdAt: string;
        createdBy: string;
        roomConfig: string | null;
        visibility: LobbyVisibility;
        region: Region;
        roomId: string;
        appId: string;
    };

    export const inboundSchema: z.ZodType<LobbyV3, z.ZodTypeDef, Inbound> = z
        .object({
            shortCode: z.string(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            createdBy: z.string(),
            roomConfig: z.nullable(z.string()),
            visibility: LobbyVisibility$,
            region: Region$,
            roomId: z.string(),
            appId: z.string(),
        })
        .transform((v) => {
            return {
                shortCode: v.shortCode,
                createdAt: v.createdAt,
                createdBy: v.createdBy,
                roomConfig: v.roomConfig,
                visibility: v.visibility,
                region: v.region,
                roomId: v.roomId,
                appId: v.appId,
            };
        });

    export type Outbound = {
        shortCode: string;
        createdAt: string;
        createdBy: string;
        roomConfig: string | null;
        visibility: LobbyVisibility;
        region: Region;
        roomId: string;
        appId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LobbyV3> = z
        .object({
            shortCode: z.string(),
            createdAt: z.date().transform((v) => v.toISOString()),
            createdBy: z.string(),
            roomConfig: z.nullable(z.string()),
            visibility: LobbyVisibility$,
            region: Region$,
            roomId: z.string(),
            appId: z.string(),
        })
        .transform((v) => {
            return {
                shortCode: v.shortCode,
                createdAt: v.createdAt,
                createdBy: v.createdBy,
                roomConfig: v.roomConfig,
                visibility: v.visibility,
                region: v.region,
                roomId: v.roomId,
                appId: v.appId,
            };
        });
}
