/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TransportType,
  TransportType$inboundSchema,
  TransportType$outboundSchema,
} from "./transporttype.js";

/**
 * Connection details for an active process.
 */
export type ExposedPort = {
  /**
   * Transport type specifies the underlying communication protocol to the exposed port.
   */
  transportType: TransportType;
  port: number;
  host: string;
  name: string;
};

/** @internal */
export const ExposedPort$inboundSchema: z.ZodType<
  ExposedPort,
  z.ZodTypeDef,
  unknown
> = z.object({
  transportType: TransportType$inboundSchema,
  port: z.number().int(),
  host: z.string(),
  name: z.string(),
});

/** @internal */
export type ExposedPort$Outbound = {
  transportType: string;
  port: number;
  host: string;
  name: string;
};

/** @internal */
export const ExposedPort$outboundSchema: z.ZodType<
  ExposedPort$Outbound,
  z.ZodTypeDef,
  ExposedPort
> = z.object({
  transportType: TransportType$outboundSchema,
  port: z.number().int(),
  host: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExposedPort$ {
  /** @deprecated use `ExposedPort$inboundSchema` instead. */
  export const inboundSchema = ExposedPort$inboundSchema;
  /** @deprecated use `ExposedPort$outboundSchema` instead. */
  export const outboundSchema = ExposedPort$outboundSchema;
  /** @deprecated use `ExposedPort$Outbound` instead. */
  export type Outbound = ExposedPort$Outbound;
}

export function exposedPortToJSON(exposedPort: ExposedPort): string {
  return JSON.stringify(ExposedPort$outboundSchema.parse(exposedPort));
}

export function exposedPortFromJSON(
  jsonString: string,
): SafeParseResult<ExposedPort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExposedPort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExposedPort' from JSON`,
  );
}
