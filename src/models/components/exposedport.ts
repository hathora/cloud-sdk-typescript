/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TransportType, TransportType$ } from "./transporttype";
import * as z from "zod";

/**
 * Connection details for an active process.
 */
export type ExposedPort = {
    /**
     * Transport type specifies the underlying communication protocol to the exposed port.
     */
    transportType: TransportType;
    port: number;
    host: string;
    name: string;
};

/** @internal */
export namespace ExposedPort$ {
    export type Inbound = {
        transportType: TransportType;
        port: number;
        host: string;
        name: string;
    };

    export const inboundSchema: z.ZodType<ExposedPort, z.ZodTypeDef, Inbound> = z
        .object({
            transportType: TransportType$,
            port: z.number().int(),
            host: z.string(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                transportType: v.transportType,
                port: v.port,
                host: v.host,
                name: v.name,
            };
        });

    export type Outbound = {
        transportType: TransportType;
        port: number;
        host: string;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExposedPort> = z
        .object({
            transportType: TransportType$,
            port: z.number().int(),
            host: z.string(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                transportType: v.transportType,
                port: v.port,
                host: v.host,
                name: v.name,
            };
        });
}
