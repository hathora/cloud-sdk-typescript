/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ExposedPort, ExposedPort$ } from "./exposedport.js";
import { Region, Region$ } from "./region.js";
import { RoomWithoutAllocations, RoomWithoutAllocations$ } from "./roomwithoutallocations.js";
import { TransportType, TransportType$ } from "./transporttype.js";
import * as z from "zod";

/**
 * Connection details for an active process.
 */
export type ProcessWithRoomsExposedPort = {
    /**
     * Transport type specifies the underlying communication protocol to the exposed port.
     */
    transportType: TransportType;
    port: number;
    host: string;
    name: string;
};

/**
 * A process object represents a runtime instance of your game server and its metadata.
 */
export type ProcessWithRooms = {
    /**
     * Measures network traffic leaving the process in bytes.
     */
    egressedBytes: number;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    idleSince: Date | null;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    activeConnectionsUpdatedAt: Date;
    /**
     * Tracks the number of active connections to a process.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    activeConnections: number;
    roomsAllocatedUpdatedAt: Date;
    /**
     * Tracks the number of rooms that have been allocated to the process.
     */
    roomsAllocated: number;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    roomSlotsAvailableUpdatedAt: Date;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    roomSlotsAvailable: number;
    /**
     * Process in drain will not accept any new rooms.
     */
    draining: boolean;
    /**
     * When the process has been terminated.
     */
    terminatedAt: Date | null;
    /**
     * When the process is issued to stop. We use this to determine when we should stop billing.
     */
    stoppingAt: Date | null;
    /**
     * When the process bound to the specified port. We use this to determine when we should start billing.
     */
    startedAt: Date | null;
    /**
     * When the process started being provisioned.
     */
    startingAt: Date;
    /**
     * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
     */
    roomsPerProcess: number;
    additionalExposedPorts: Array<ExposedPort>;
    exposedPort: ProcessWithRoomsExposedPort | null;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    port: number;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    host: string;
    region: Region;
    /**
     * System generated unique identifier to a runtime instance of your game server.
     */
    processId: string;
    /**
     * System generated id for a deployment. Increments by 1.
     */
    deploymentId: number;
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
    rooms: Array<RoomWithoutAllocations>;
    totalRooms: number;
};

/** @internal */
export namespace ProcessWithRoomsExposedPort$ {
    export const inboundSchema: z.ZodType<ProcessWithRoomsExposedPort, z.ZodTypeDef, unknown> =
        z.object({
            transportType: TransportType$.inboundSchema,
            port: z.number().int(),
            host: z.string(),
            name: z.string(),
        });

    export type Outbound = {
        transportType: string;
        port: number;
        host: string;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProcessWithRoomsExposedPort> =
        z.object({
            transportType: TransportType$.outboundSchema,
            port: z.number().int(),
            host: z.string(),
            name: z.string(),
        });
}

/** @internal */
export namespace ProcessWithRooms$ {
    export const inboundSchema: z.ZodType<ProcessWithRooms, z.ZodTypeDef, unknown> = z.object({
        egressedBytes: z.number().int(),
        idleSince: z.nullable(
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
        ),
        activeConnectionsUpdatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        activeConnections: z.number().int(),
        roomsAllocatedUpdatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        roomsAllocated: z.number().int(),
        roomSlotsAvailableUpdatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        roomSlotsAvailable: z.number(),
        draining: z.boolean(),
        terminatedAt: z.nullable(
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
        ),
        stoppingAt: z.nullable(
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
        ),
        startedAt: z.nullable(
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
        ),
        startingAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        roomsPerProcess: z.number().int(),
        additionalExposedPorts: z.array(ExposedPort$.inboundSchema),
        exposedPort: z.nullable(z.lazy(() => ProcessWithRoomsExposedPort$.inboundSchema)),
        port: z.number(),
        host: z.string(),
        region: Region$.inboundSchema,
        processId: z.string(),
        deploymentId: z.number().int(),
        appId: z.string(),
        rooms: z.array(RoomWithoutAllocations$.inboundSchema),
        totalRooms: z.number().int(),
    });

    export type Outbound = {
        egressedBytes: number;
        idleSince: string | null;
        activeConnectionsUpdatedAt: string;
        activeConnections: number;
        roomsAllocatedUpdatedAt: string;
        roomsAllocated: number;
        roomSlotsAvailableUpdatedAt: string;
        roomSlotsAvailable: number;
        draining: boolean;
        terminatedAt: string | null;
        stoppingAt: string | null;
        startedAt: string | null;
        startingAt: string;
        roomsPerProcess: number;
        additionalExposedPorts: Array<ExposedPort$.Outbound>;
        exposedPort: ProcessWithRoomsExposedPort$.Outbound | null;
        port: number;
        host: string;
        region: string;
        processId: string;
        deploymentId: number;
        appId: string;
        rooms: Array<RoomWithoutAllocations$.Outbound>;
        totalRooms: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProcessWithRooms> = z.object({
        egressedBytes: z.number().int(),
        idleSince: z.nullable(z.date().transform((v) => v.toISOString())),
        activeConnectionsUpdatedAt: z.date().transform((v) => v.toISOString()),
        activeConnections: z.number().int(),
        roomsAllocatedUpdatedAt: z.date().transform((v) => v.toISOString()),
        roomsAllocated: z.number().int(),
        roomSlotsAvailableUpdatedAt: z.date().transform((v) => v.toISOString()),
        roomSlotsAvailable: z.number(),
        draining: z.boolean(),
        terminatedAt: z.nullable(z.date().transform((v) => v.toISOString())),
        stoppingAt: z.nullable(z.date().transform((v) => v.toISOString())),
        startedAt: z.nullable(z.date().transform((v) => v.toISOString())),
        startingAt: z.date().transform((v) => v.toISOString()),
        roomsPerProcess: z.number().int(),
        additionalExposedPorts: z.array(ExposedPort$.outboundSchema),
        exposedPort: z.nullable(z.lazy(() => ProcessWithRoomsExposedPort$.outboundSchema)),
        port: z.number(),
        host: z.string(),
        region: Region$.outboundSchema,
        processId: z.string(),
        deploymentId: z.number().int(),
        appId: z.string(),
        rooms: z.array(RoomWithoutAllocations$.outboundSchema),
        totalRooms: z.number().int(),
    });
}
