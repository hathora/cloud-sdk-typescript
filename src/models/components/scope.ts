/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

export const Scope = {
  BillingReadWrite: "billing:read-write",
  BuildsRead: "builds:read",
  BuildsReadWrite: "builds:read-write",
  DeploymentsRead: "deployments:read",
  DeploymentsReadWrite: "deployments:read-write",
  ApplicationsRead: "applications:read",
  ApplicationsReadWrite: "applications:read-write",
  ProcessesRead: "processes:read",
  ProcessesReadWrite: "processes:read-write",
  FleetsRead: "fleets:read",
  FleetsReadWrite: "fleets:read-write",
  OrgsRead: "orgs:read",
  OrgsReadWrite: "orgs:read-write",
  TokensRead: "tokens:read",
  TokensReadWrite: "tokens:read-write",
  TicketsRead: "tickets:read",
  TicketsReadWrite: "tickets:read-write",
} as const;
export type Scope = OpenEnum<typeof Scope>;

/** @internal */
export const Scope$inboundSchema: z.ZodType<Scope, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Scope),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Scope$outboundSchema: z.ZodType<Scope, z.ZodTypeDef, Scope> = z
  .union([
    z.nativeEnum(Scope),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scope$ {
  /** @deprecated use `Scope$inboundSchema` instead. */
  export const inboundSchema = Scope$inboundSchema;
  /** @deprecated use `Scope$outboundSchema` instead. */
  export const outboundSchema = Scope$outboundSchema;
}
