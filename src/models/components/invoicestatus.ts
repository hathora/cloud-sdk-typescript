/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import * as z from "zod";

export const InvoiceStatus = {
    Pending: "pending",
    Paid: "paid",
    Overdue: "overdue",
} as const;
export type InvoiceStatus = OpenEnum<typeof InvoiceStatus>;

/** @internal */
export const InvoiceStatus$inboundSchema: z.ZodType<InvoiceStatus, z.ZodTypeDef, unknown> = z.union(
    [z.nativeEnum(InvoiceStatus), z.string().transform(catchUnrecognizedEnum)]
);

/** @internal */
export const InvoiceStatus$outboundSchema: z.ZodType<InvoiceStatus, z.ZodTypeDef, InvoiceStatus> =
    z.union([z.nativeEnum(InvoiceStatus), z.string().and(z.custom<Unrecognized<string>>())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceStatus$ {
    /** @deprecated use `InvoiceStatus$inboundSchema` instead. */
    export const inboundSchema = InvoiceStatus$inboundSchema;
    /** @deprecated use `InvoiceStatus$outboundSchema` instead. */
    export const outboundSchema = InvoiceStatus$outboundSchema;
}
