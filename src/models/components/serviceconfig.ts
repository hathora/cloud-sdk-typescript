/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LoadBalancerConfig,
  LoadBalancerConfig$inboundSchema,
  LoadBalancerConfig$Outbound,
  LoadBalancerConfig$outboundSchema,
} from "./loadbalancerconfig.js";
import {
  StaticProcessAllocationConfig,
  StaticProcessAllocationConfig$inboundSchema,
  StaticProcessAllocationConfig$Outbound,
  StaticProcessAllocationConfig$outboundSchema,
} from "./staticprocessallocationconfig.js";

export type ServiceConfig = {
  loadBalancer?: LoadBalancerConfig | undefined;
  /**
   * The headroom configuration for each region.
   *
   * @remarks
   * EXPERIMENTAL - this feature is in closed beta.
   */
  staticProcessAllocation: Array<StaticProcessAllocationConfig>;
};

/** @internal */
export const ServiceConfig$inboundSchema: z.ZodType<
  ServiceConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  loadBalancer: LoadBalancerConfig$inboundSchema.optional(),
  staticProcessAllocation: z.array(StaticProcessAllocationConfig$inboundSchema),
});

/** @internal */
export type ServiceConfig$Outbound = {
  loadBalancer?: LoadBalancerConfig$Outbound | undefined;
  staticProcessAllocation: Array<StaticProcessAllocationConfig$Outbound>;
};

/** @internal */
export const ServiceConfig$outboundSchema: z.ZodType<
  ServiceConfig$Outbound,
  z.ZodTypeDef,
  ServiceConfig
> = z.object({
  loadBalancer: LoadBalancerConfig$outboundSchema.optional(),
  staticProcessAllocation: z.array(
    StaticProcessAllocationConfig$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceConfig$ {
  /** @deprecated use `ServiceConfig$inboundSchema` instead. */
  export const inboundSchema = ServiceConfig$inboundSchema;
  /** @deprecated use `ServiceConfig$outboundSchema` instead. */
  export const outboundSchema = ServiceConfig$outboundSchema;
  /** @deprecated use `ServiceConfig$Outbound` instead. */
  export type Outbound = ServiceConfig$Outbound;
}

export function serviceConfigToJSON(serviceConfig: ServiceConfig): string {
  return JSON.stringify(ServiceConfig$outboundSchema.parse(serviceConfig));
}

export function serviceConfigFromJSON(
  jsonString: string,
): SafeParseResult<ServiceConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceConfig' from JSON`,
  );
}
