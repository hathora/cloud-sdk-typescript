/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { OrgToken, OrgToken$ } from "./orgtoken";
import * as z from "zod";

export type CreatedOrgToken = {
    plainTextToken: string;
    orgToken: OrgToken;
};

/** @internal */
export namespace CreatedOrgToken$ {
    export type Inbound = {
        plainTextToken: string;
        orgToken: OrgToken$.Inbound;
    };

    export const inboundSchema: z.ZodType<CreatedOrgToken, z.ZodTypeDef, Inbound> = z
        .object({
            plainTextToken: z.string(),
            orgToken: OrgToken$.inboundSchema,
        })
        .transform((v) => {
            return {
                plainTextToken: v.plainTextToken,
                orgToken: v.orgToken,
            };
        });

    export type Outbound = {
        plainTextToken: string;
        orgToken: OrgToken$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatedOrgToken> = z
        .object({
            plainTextToken: z.string(),
            orgToken: OrgToken$.outboundSchema,
        })
        .transform((v) => {
            return {
                plainTextToken: v.plainTextToken,
                orgToken: v.orgToken,
            };
        });
}
