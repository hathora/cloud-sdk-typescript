/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Metadata on an allocated instance of a room.
 */
export type RoomAllocation = {
    unscheduledAt: Date | null;
    scheduledAt: Date;
    /**
     * System generated unique identifier to a runtime instance of your game server.
     */
    processId: string;
    /**
     * System generated unique identifier to an allocated instance of a room.
     */
    roomAllocationId: string;
};

/** @internal */
export namespace RoomAllocation$ {
    export type Inbound = {
        unscheduledAt: string | null;
        scheduledAt: string;
        processId: string;
        roomAllocationId: string;
    };

    export const inboundSchema: z.ZodType<RoomAllocation, z.ZodTypeDef, Inbound> = z
        .object({
            unscheduledAt: z.nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            ),
            scheduledAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            processId: z.string(),
            roomAllocationId: z.string(),
        })
        .transform((v) => {
            return {
                unscheduledAt: v.unscheduledAt,
                scheduledAt: v.scheduledAt,
                processId: v.processId,
                roomAllocationId: v.roomAllocationId,
            };
        });

    export type Outbound = {
        unscheduledAt: string | null;
        scheduledAt: string;
        processId: string;
        roomAllocationId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RoomAllocation> = z
        .object({
            unscheduledAt: z.nullable(z.date().transform((v) => v.toISOString())),
            scheduledAt: z.date().transform((v) => v.toISOString()),
            processId: z.string(),
            roomAllocationId: z.string(),
        })
        .transform((v) => {
            return {
                unscheduledAt: v.unscheduledAt,
                scheduledAt: v.scheduledAt,
                processId: v.processId,
                roomAllocationId: v.roomAllocationId,
            };
        });
}
