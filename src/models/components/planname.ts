/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

/**
 * A plan defines how much CPU and memory is required to run an instance of your game server.
 *
 * @remarks
 *
 * `tiny`: shared core, 1gb memory
 *
 * `small`: 1 core, 2gb memory
 *
 * `medium`: 2 core, 4gb memory
 *
 * `large`: 4 core, 8gb memory
 */
export const PlanName = {
  Tiny: "tiny",
  Small: "small",
  Medium: "medium",
  Large: "large",
} as const;
/**
 * A plan defines how much CPU and memory is required to run an instance of your game server.
 *
 * @remarks
 *
 * `tiny`: shared core, 1gb memory
 *
 * `small`: 1 core, 2gb memory
 *
 * `medium`: 2 core, 4gb memory
 *
 * `large`: 4 core, 8gb memory
 */
export type PlanName = OpenEnum<typeof PlanName>;

/** @internal */
export const PlanName$inboundSchema: z.ZodType<
  PlanName,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(PlanName),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const PlanName$outboundSchema: z.ZodType<
  PlanName,
  z.ZodTypeDef,
  PlanName
> = z.union([
  z.nativeEnum(PlanName),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlanName$ {
  /** @deprecated use `PlanName$inboundSchema` instead. */
  export const inboundSchema = PlanName$inboundSchema;
  /** @deprecated use `PlanName$outboundSchema` instead. */
  export const outboundSchema = PlanName$outboundSchema;
}
