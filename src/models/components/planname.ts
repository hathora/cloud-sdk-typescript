/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import * as z from "zod";

/**
 * A plan defines how much CPU and memory is required to run an instance of your game server.
 *
 * @remarks
 *
 * `tiny`: shared core, 1gb memory
 *
 * `small`: 1 core, 2gb memory
 *
 * `medium`: 2 core, 4gb memory
 *
 * `large`: 4 core, 8gb memory
 */
export const PlanName = {
    Tiny: "tiny",
    Small: "small",
    Medium: "medium",
    Large: "large",
} as const;
/**
 * A plan defines how much CPU and memory is required to run an instance of your game server.
 *
 * @remarks
 *
 * `tiny`: shared core, 1gb memory
 *
 * `small`: 1 core, 2gb memory
 *
 * `medium`: 2 core, 4gb memory
 *
 * `large`: 4 core, 8gb memory
 */
export type PlanName = OpenEnum<typeof PlanName>;

/** @internal */
export namespace PlanName$ {
    export const inboundSchema: z.ZodType<PlanName, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(PlanName),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema: z.ZodType<PlanName, z.ZodTypeDef, PlanName> = z.union([
        z.nativeEnum(PlanName),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}
