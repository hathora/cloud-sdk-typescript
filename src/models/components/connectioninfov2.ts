/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ExposedPort, ExposedPort$ } from "./exposedport";
import { RoomReadyStatus, RoomReadyStatus$ } from "./roomreadystatus";
import * as z from "zod";

/**
 * Connection information for the default and additional ports.
 */
export type ConnectionInfoV2 = {
    additionalExposedPorts: Array<ExposedPort>;
    /**
     * Connection details for an active process.
     */
    exposedPort?: ExposedPort | undefined;
    status: RoomReadyStatus;
    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     *
     * @remarks
     * Note: error will be returned if `roomId` is not globally unique.
     */
    roomId: string;
};

/** @internal */
export namespace ConnectionInfoV2$ {
    export const inboundSchema: z.ZodType<ConnectionInfoV2, z.ZodTypeDef, unknown> = z
        .object({
            additionalExposedPorts: z.array(ExposedPort$.inboundSchema),
            exposedPort: ExposedPort$.inboundSchema.optional(),
            status: RoomReadyStatus$.inboundSchema,
            roomId: z.string(),
        })
        .transform((v) => {
            return {
                additionalExposedPorts: v.additionalExposedPorts,
                ...(v.exposedPort === undefined ? null : { exposedPort: v.exposedPort }),
                status: v.status,
                roomId: v.roomId,
            };
        });

    export type Outbound = {
        additionalExposedPorts: Array<ExposedPort$.Outbound>;
        exposedPort?: ExposedPort$.Outbound | undefined;
        status: string;
        roomId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectionInfoV2> = z
        .object({
            additionalExposedPorts: z.array(ExposedPort$.outboundSchema),
            exposedPort: ExposedPort$.outboundSchema.optional(),
            status: RoomReadyStatus$.outboundSchema,
            roomId: z.string(),
        })
        .transform((v) => {
            return {
                additionalExposedPorts: v.additionalExposedPorts,
                ...(v.exposedPort === undefined ? null : { exposedPort: v.exposedPort }),
                status: v.status,
                roomId: v.roomId,
            };
        });
}
