/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    ExposedPort,
    ExposedPort$inboundSchema,
    ExposedPort$Outbound,
    ExposedPort$outboundSchema,
} from "./exposedport.js";
import {
    RoomReadyStatus,
    RoomReadyStatus$inboundSchema,
    RoomReadyStatus$outboundSchema,
} from "./roomreadystatus.js";
import * as z from "zod";

/**
 * Connection information for the default and additional ports.
 */
export type ConnectionInfoV2 = {
    additionalExposedPorts: Array<ExposedPort>;
    /**
     * Connection details for an active process.
     */
    exposedPort?: ExposedPort | undefined;
    status: RoomReadyStatus;
    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     *
     * @remarks
     * Note: error will be returned if `roomId` is not globally unique.
     */
    roomId: string;
};

/** @internal */
export const ConnectionInfoV2$inboundSchema: z.ZodType<ConnectionInfoV2, z.ZodTypeDef, unknown> =
    z.object({
        additionalExposedPorts: z.array(ExposedPort$inboundSchema),
        exposedPort: ExposedPort$inboundSchema.optional(),
        status: RoomReadyStatus$inboundSchema,
        roomId: z.string(),
    });

/** @internal */
export type ConnectionInfoV2$Outbound = {
    additionalExposedPorts: Array<ExposedPort$Outbound>;
    exposedPort?: ExposedPort$Outbound | undefined;
    status: string;
    roomId: string;
};

/** @internal */
export const ConnectionInfoV2$outboundSchema: z.ZodType<
    ConnectionInfoV2$Outbound,
    z.ZodTypeDef,
    ConnectionInfoV2
> = z.object({
    additionalExposedPorts: z.array(ExposedPort$outboundSchema),
    exposedPort: ExposedPort$outboundSchema.optional(),
    status: RoomReadyStatus$outboundSchema,
    roomId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionInfoV2$ {
    /** @deprecated use `ConnectionInfoV2$inboundSchema` instead. */
    export const inboundSchema = ConnectionInfoV2$inboundSchema;
    /** @deprecated use `ConnectionInfoV2$outboundSchema` instead. */
    export const outboundSchema = ConnectionInfoV2$outboundSchema;
    /** @deprecated use `ConnectionInfoV2$Outbound` instead. */
    export type Outbound = ConnectionInfoV2$Outbound;
}
