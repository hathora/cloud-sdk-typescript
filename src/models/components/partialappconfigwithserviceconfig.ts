/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthConfiguration,
  AuthConfiguration$inboundSchema,
  AuthConfiguration$Outbound,
  AuthConfiguration$outboundSchema,
} from "./authconfiguration.js";
import {
  ServiceConfigWrite,
  ServiceConfigWrite$inboundSchema,
  ServiceConfigWrite$Outbound,
  ServiceConfigWrite$outboundSchema,
} from "./serviceconfigwrite.js";

/**
 * Make all properties in T optional
 */
export type PartialAppConfigWithServiceConfig = {
  appName?: string | undefined;
  /**
   * Configure [player authentication](https://hathora.dev/docs/backend-integrations/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
   */
  authConfiguration?: AuthConfiguration | undefined;
  serviceConfig?: ServiceConfigWrite | undefined;
};

/** @internal */
export const PartialAppConfigWithServiceConfig$inboundSchema: z.ZodType<
  PartialAppConfigWithServiceConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  appName: z.string().optional(),
  authConfiguration: AuthConfiguration$inboundSchema.optional(),
  serviceConfig: ServiceConfigWrite$inboundSchema.optional(),
});

/** @internal */
export type PartialAppConfigWithServiceConfig$Outbound = {
  appName?: string | undefined;
  authConfiguration?: AuthConfiguration$Outbound | undefined;
  serviceConfig?: ServiceConfigWrite$Outbound | undefined;
};

/** @internal */
export const PartialAppConfigWithServiceConfig$outboundSchema: z.ZodType<
  PartialAppConfigWithServiceConfig$Outbound,
  z.ZodTypeDef,
  PartialAppConfigWithServiceConfig
> = z.object({
  appName: z.string().optional(),
  authConfiguration: AuthConfiguration$outboundSchema.optional(),
  serviceConfig: ServiceConfigWrite$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PartialAppConfigWithServiceConfig$ {
  /** @deprecated use `PartialAppConfigWithServiceConfig$inboundSchema` instead. */
  export const inboundSchema = PartialAppConfigWithServiceConfig$inboundSchema;
  /** @deprecated use `PartialAppConfigWithServiceConfig$outboundSchema` instead. */
  export const outboundSchema =
    PartialAppConfigWithServiceConfig$outboundSchema;
  /** @deprecated use `PartialAppConfigWithServiceConfig$Outbound` instead. */
  export type Outbound = PartialAppConfigWithServiceConfig$Outbound;
}

export function partialAppConfigWithServiceConfigToJSON(
  partialAppConfigWithServiceConfig: PartialAppConfigWithServiceConfig,
): string {
  return JSON.stringify(
    PartialAppConfigWithServiceConfig$outboundSchema.parse(
      partialAppConfigWithServiceConfig,
    ),
  );
}

export function partialAppConfigWithServiceConfigFromJSON(
  jsonString: string,
): SafeParseResult<PartialAppConfigWithServiceConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PartialAppConfigWithServiceConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PartialAppConfigWithServiceConfig' from JSON`,
  );
}
