/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Construct a type with a set of properties K of type T
 */
export type RecordStringNever = {};

/** @internal */
export const RecordStringNever$inboundSchema: z.ZodType<
  RecordStringNever,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RecordStringNever$Outbound = {};

/** @internal */
export const RecordStringNever$outboundSchema: z.ZodType<
  RecordStringNever$Outbound,
  z.ZodTypeDef,
  RecordStringNever
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordStringNever$ {
  /** @deprecated use `RecordStringNever$inboundSchema` instead. */
  export const inboundSchema = RecordStringNever$inboundSchema;
  /** @deprecated use `RecordStringNever$outboundSchema` instead. */
  export const outboundSchema = RecordStringNever$outboundSchema;
  /** @deprecated use `RecordStringNever$Outbound` instead. */
  export type Outbound = RecordStringNever$Outbound;
}

export function recordStringNeverToJSON(
  recordStringNever: RecordStringNever,
): string {
  return JSON.stringify(
    RecordStringNever$outboundSchema.parse(recordStringNever),
  );
}

export function recordStringNeverFromJSON(
  jsonString: string,
): SafeParseResult<RecordStringNever, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecordStringNever$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecordStringNever' from JSON`,
  );
}
