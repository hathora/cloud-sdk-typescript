/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Scope, Scope$inboundSchema, Scope$outboundSchema } from "./scope.js";
import {
  UserRole,
  UserRole$inboundSchema,
  UserRole$outboundSchema,
} from "./userrole.js";

export type OrgMemberScopes = UserRole | Array<Scope>;

export type OrgMember = {
  scopes: UserRole | Array<Scope>;
  lastLogin?: Date | undefined;
  joinedAt: Date;
  createdAt: Date;
  invitedBy: string;
  /**
   * A user's email.
   */
  userEmail: string;
  /**
   * System generated unique identifier for an organization. Not guaranteed to have a specific format.
   */
  orgId: string;
};

/** @internal */
export const OrgMemberScopes$inboundSchema: z.ZodType<
  OrgMemberScopes,
  z.ZodTypeDef,
  unknown
> = z.union([UserRole$inboundSchema, z.array(Scope$inboundSchema)]);

/** @internal */
export type OrgMemberScopes$Outbound = string | Array<string>;

/** @internal */
export const OrgMemberScopes$outboundSchema: z.ZodType<
  OrgMemberScopes$Outbound,
  z.ZodTypeDef,
  OrgMemberScopes
> = z.union([UserRole$outboundSchema, z.array(Scope$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrgMemberScopes$ {
  /** @deprecated use `OrgMemberScopes$inboundSchema` instead. */
  export const inboundSchema = OrgMemberScopes$inboundSchema;
  /** @deprecated use `OrgMemberScopes$outboundSchema` instead. */
  export const outboundSchema = OrgMemberScopes$outboundSchema;
  /** @deprecated use `OrgMemberScopes$Outbound` instead. */
  export type Outbound = OrgMemberScopes$Outbound;
}

export function orgMemberScopesToJSON(
  orgMemberScopes: OrgMemberScopes,
): string {
  return JSON.stringify(OrgMemberScopes$outboundSchema.parse(orgMemberScopes));
}

export function orgMemberScopesFromJSON(
  jsonString: string,
): SafeParseResult<OrgMemberScopes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrgMemberScopes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrgMemberScopes' from JSON`,
  );
}

/** @internal */
export const OrgMember$inboundSchema: z.ZodType<
  OrgMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.union([UserRole$inboundSchema, z.array(Scope$inboundSchema)]),
  lastLogin: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  joinedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  invitedBy: z.string(),
  userEmail: z.string(),
  orgId: z.string(),
});

/** @internal */
export type OrgMember$Outbound = {
  scopes: string | Array<string>;
  lastLogin?: string | undefined;
  joinedAt: string;
  createdAt: string;
  invitedBy: string;
  userEmail: string;
  orgId: string;
};

/** @internal */
export const OrgMember$outboundSchema: z.ZodType<
  OrgMember$Outbound,
  z.ZodTypeDef,
  OrgMember
> = z.object({
  scopes: z.union([UserRole$outboundSchema, z.array(Scope$outboundSchema)]),
  lastLogin: z.date().transform(v => v.toISOString()).optional(),
  joinedAt: z.date().transform(v => v.toISOString()),
  createdAt: z.date().transform(v => v.toISOString()),
  invitedBy: z.string(),
  userEmail: z.string(),
  orgId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrgMember$ {
  /** @deprecated use `OrgMember$inboundSchema` instead. */
  export const inboundSchema = OrgMember$inboundSchema;
  /** @deprecated use `OrgMember$outboundSchema` instead. */
  export const outboundSchema = OrgMember$outboundSchema;
  /** @deprecated use `OrgMember$Outbound` instead. */
  export type Outbound = OrgMember$Outbound;
}

export function orgMemberToJSON(orgMember: OrgMember): string {
  return JSON.stringify(OrgMember$outboundSchema.parse(orgMember));
}

export function orgMemberFromJSON(
  jsonString: string,
): SafeParseResult<OrgMember, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrgMember$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrgMember' from JSON`,
  );
}
