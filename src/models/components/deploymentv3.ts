/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContainerPort,
  ContainerPort$inboundSchema,
  ContainerPort$Outbound,
  ContainerPort$outboundSchema,
} from "./containerport.js";

export type DeploymentV3Env = {
  value: string;
  name: string;
};

export type DeploymentV3 = {
  /**
   * The id of the fleet.
   */
  fleetId?: string | undefined;
  /**
   * Arbitrary metadata associated with a deployment.
   */
  deploymentTag?: string | undefined;
  /**
   * Option to shut down processes that have had no new connections or rooms
   *
   * @remarks
   * for five minutes.
   */
  idleTimeoutEnabled: boolean;
  /**
   * The environment variable that our process will have access to at runtime.
   */
  env: Array<DeploymentV3Env>;
  /**
   * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
   */
  roomsPerProcess: number;
  /**
   * Additional ports your server listens on.
   */
  additionalContainerPorts: Array<ContainerPort>;
  /**
   * A container port object represents the transport configruations for how your server will listen.
   */
  defaultContainerPort: ContainerPort;
  /**
   * When the deployment was created.
   */
  createdAt: Date;
  createdBy: string;
  /**
   * The number of GPUs allocated to your process. Must be an integer.
   *
   * @remarks
   * If not provided, the requested GPU is 0.
   */
  requestedGPU?: number | undefined;
  /**
   * EXPERIMENTAL - this feature is in closed beta.
   *
   * @remarks
   * The number of GPUs allocated to your process. Must be an integer.
   * If not provided, the requested GPU is 0.
   */
  experimentalRequestedGPU?: number | undefined;
  /**
   * The amount of memory allocated to your process. By default, this is capped
   *
   * @remarks
   * at 8192 MB, but can be increased further on the Enterprise tier.
   */
  requestedMemoryMB: number;
  /**
   * The number of cores allocated to your process.
   */
  requestedCPU: number;
  /**
   * System generated id for a deployment.
   */
  deploymentId: string;
  /**
   * Tag to associate an external version with a build. It is accessible via [`GetBuild()`](https://hathora.dev/api#tag/BuildsV3/operation/GetBuild).
   */
  buildTag?: string | undefined;
  /**
   * System generated id for a build. Can also be user defined when creating a build.
   */
  buildId: string;
  /**
   * System generated unique identifier for an application.
   */
  appId: string;
};

/** @internal */
export const DeploymentV3Env$inboundSchema: z.ZodType<
  DeploymentV3Env,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  name: z.string(),
});

/** @internal */
export type DeploymentV3Env$Outbound = {
  value: string;
  name: string;
};

/** @internal */
export const DeploymentV3Env$outboundSchema: z.ZodType<
  DeploymentV3Env$Outbound,
  z.ZodTypeDef,
  DeploymentV3Env
> = z.object({
  value: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentV3Env$ {
  /** @deprecated use `DeploymentV3Env$inboundSchema` instead. */
  export const inboundSchema = DeploymentV3Env$inboundSchema;
  /** @deprecated use `DeploymentV3Env$outboundSchema` instead. */
  export const outboundSchema = DeploymentV3Env$outboundSchema;
  /** @deprecated use `DeploymentV3Env$Outbound` instead. */
  export type Outbound = DeploymentV3Env$Outbound;
}

export function deploymentV3EnvToJSON(
  deploymentV3Env: DeploymentV3Env,
): string {
  return JSON.stringify(DeploymentV3Env$outboundSchema.parse(deploymentV3Env));
}

export function deploymentV3EnvFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentV3Env, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentV3Env$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentV3Env' from JSON`,
  );
}

/** @internal */
export const DeploymentV3$inboundSchema: z.ZodType<
  DeploymentV3,
  z.ZodTypeDef,
  unknown
> = z.object({
  fleetId: z.string().optional(),
  deploymentTag: z.string().optional(),
  idleTimeoutEnabled: z.boolean(),
  env: z.array(z.lazy(() => DeploymentV3Env$inboundSchema)),
  roomsPerProcess: z.number().int(),
  additionalContainerPorts: z.array(ContainerPort$inboundSchema),
  defaultContainerPort: ContainerPort$inboundSchema,
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  requestedGPU: z.number().optional(),
  experimentalRequestedGPU: z.number().optional(),
  requestedMemoryMB: z.number(),
  requestedCPU: z.number(),
  deploymentId: z.string(),
  buildTag: z.string().optional(),
  buildId: z.string(),
  appId: z.string(),
});

/** @internal */
export type DeploymentV3$Outbound = {
  fleetId?: string | undefined;
  deploymentTag?: string | undefined;
  idleTimeoutEnabled: boolean;
  env: Array<DeploymentV3Env$Outbound>;
  roomsPerProcess: number;
  additionalContainerPorts: Array<ContainerPort$Outbound>;
  defaultContainerPort: ContainerPort$Outbound;
  createdAt: string;
  createdBy: string;
  requestedGPU?: number | undefined;
  experimentalRequestedGPU?: number | undefined;
  requestedMemoryMB: number;
  requestedCPU: number;
  deploymentId: string;
  buildTag?: string | undefined;
  buildId: string;
  appId: string;
};

/** @internal */
export const DeploymentV3$outboundSchema: z.ZodType<
  DeploymentV3$Outbound,
  z.ZodTypeDef,
  DeploymentV3
> = z.object({
  fleetId: z.string().optional(),
  deploymentTag: z.string().optional(),
  idleTimeoutEnabled: z.boolean(),
  env: z.array(z.lazy(() => DeploymentV3Env$outboundSchema)),
  roomsPerProcess: z.number().int(),
  additionalContainerPorts: z.array(ContainerPort$outboundSchema),
  defaultContainerPort: ContainerPort$outboundSchema,
  createdAt: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  requestedGPU: z.number().optional(),
  experimentalRequestedGPU: z.number().optional(),
  requestedMemoryMB: z.number(),
  requestedCPU: z.number(),
  deploymentId: z.string(),
  buildTag: z.string().optional(),
  buildId: z.string(),
  appId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentV3$ {
  /** @deprecated use `DeploymentV3$inboundSchema` instead. */
  export const inboundSchema = DeploymentV3$inboundSchema;
  /** @deprecated use `DeploymentV3$outboundSchema` instead. */
  export const outboundSchema = DeploymentV3$outboundSchema;
  /** @deprecated use `DeploymentV3$Outbound` instead. */
  export type Outbound = DeploymentV3$Outbound;
}

export function deploymentV3ToJSON(deploymentV3: DeploymentV3): string {
  return JSON.stringify(DeploymentV3$outboundSchema.parse(deploymentV3));
}

export function deploymentV3FromJSON(
  jsonString: string,
): SafeParseResult<DeploymentV3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentV3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentV3' from JSON`,
  );
}
