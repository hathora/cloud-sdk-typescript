/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExposedPort,
  ExposedPort$inboundSchema,
  ExposedPort$Outbound,
  ExposedPort$outboundSchema,
} from "./exposedport.js";
import {
  RoomReadyStatus,
  RoomReadyStatus$inboundSchema,
  RoomReadyStatus$outboundSchema,
} from "./roomreadystatus.js";

/**
 * Connection information for the default and additional ports.
 */
export type RoomAllocationData = {
  additionalExposedPorts: Array<ExposedPort>;
  /**
   * Connection details for an active process.
   */
  exposedPort?: ExposedPort | undefined;
  status: RoomReadyStatus;
  /**
   * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
   *
   * @remarks
   * Note: error will be returned if `roomId` is not globally unique.
   */
  roomId: string;
  /**
   * System generated unique identifier to a runtime instance of your game server.
   */
  processId?: string | undefined;
};

/** @internal */
export const RoomAllocationData$inboundSchema: z.ZodType<
  RoomAllocationData,
  z.ZodTypeDef,
  unknown
> = z.object({
  additionalExposedPorts: z.array(ExposedPort$inboundSchema),
  exposedPort: ExposedPort$inboundSchema.optional(),
  status: RoomReadyStatus$inboundSchema,
  roomId: z.string(),
  processId: z.string().optional(),
});

/** @internal */
export type RoomAllocationData$Outbound = {
  additionalExposedPorts: Array<ExposedPort$Outbound>;
  exposedPort?: ExposedPort$Outbound | undefined;
  status: string;
  roomId: string;
  processId?: string | undefined;
};

/** @internal */
export const RoomAllocationData$outboundSchema: z.ZodType<
  RoomAllocationData$Outbound,
  z.ZodTypeDef,
  RoomAllocationData
> = z.object({
  additionalExposedPorts: z.array(ExposedPort$outboundSchema),
  exposedPort: ExposedPort$outboundSchema.optional(),
  status: RoomReadyStatus$outboundSchema,
  roomId: z.string(),
  processId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoomAllocationData$ {
  /** @deprecated use `RoomAllocationData$inboundSchema` instead. */
  export const inboundSchema = RoomAllocationData$inboundSchema;
  /** @deprecated use `RoomAllocationData$outboundSchema` instead. */
  export const outboundSchema = RoomAllocationData$outboundSchema;
  /** @deprecated use `RoomAllocationData$Outbound` instead. */
  export type Outbound = RoomAllocationData$Outbound;
}

export function roomAllocationDataToJSON(
  roomAllocationData: RoomAllocationData,
): string {
  return JSON.stringify(
    RoomAllocationData$outboundSchema.parse(roomAllocationData),
  );
}

export function roomAllocationDataFromJSON(
  jsonString: string,
): SafeParseResult<RoomAllocationData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoomAllocationData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoomAllocationData' from JSON`,
  );
}
