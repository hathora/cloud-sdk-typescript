/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrgToken,
  OrgToken$inboundSchema,
  OrgToken$Outbound,
  OrgToken$outboundSchema,
} from "./orgtoken.js";

export type ListOrgTokens = {
  tokens: Array<OrgToken>;
};

/** @internal */
export const ListOrgTokens$inboundSchema: z.ZodType<
  ListOrgTokens,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokens: z.array(OrgToken$inboundSchema),
});

/** @internal */
export type ListOrgTokens$Outbound = {
  tokens: Array<OrgToken$Outbound>;
};

/** @internal */
export const ListOrgTokens$outboundSchema: z.ZodType<
  ListOrgTokens$Outbound,
  z.ZodTypeDef,
  ListOrgTokens
> = z.object({
  tokens: z.array(OrgToken$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrgTokens$ {
  /** @deprecated use `ListOrgTokens$inboundSchema` instead. */
  export const inboundSchema = ListOrgTokens$inboundSchema;
  /** @deprecated use `ListOrgTokens$outboundSchema` instead. */
  export const outboundSchema = ListOrgTokens$outboundSchema;
  /** @deprecated use `ListOrgTokens$Outbound` instead. */
  export type Outbound = ListOrgTokens$Outbound;
}

export function listOrgTokensToJSON(listOrgTokens: ListOrgTokens): string {
  return JSON.stringify(ListOrgTokens$outboundSchema.parse(listOrgTokens));
}

export function listOrgTokensFromJSON(
  jsonString: string,
): SafeParseResult<ListOrgTokens, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrgTokens$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrgTokens' from JSON`,
  );
}
