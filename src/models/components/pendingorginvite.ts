/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type PendingOrgInvite = {
    createdAt: Date;
    invitedBy: string;
    /**
     * A user's email.
     */
    userEmail: string;
    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    orgId: string;
};

/** @internal */
export namespace PendingOrgInvite$ {
    export const inboundSchema: z.ZodType<PendingOrgInvite, z.ZodTypeDef, unknown> = z.object({
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        invitedBy: z.string(),
        userEmail: z.string(),
        orgId: z.string(),
    });

    export type Outbound = {
        createdAt: string;
        invitedBy: string;
        userEmail: string;
        orgId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PendingOrgInvite> = z.object({
        createdAt: z.date().transform((v) => v.toISOString()),
        invitedBy: z.string(),
        userEmail: z.string(),
        orgId: z.string(),
    });
}
