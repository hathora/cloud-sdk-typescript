/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    ContainerPort,
    ContainerPort$inboundSchema,
    ContainerPort$Outbound,
    ContainerPort$outboundSchema,
} from "./containerport.js";
import * as z from "zod";

export type DeploymentV2Env = {
    value: string;
    name: string;
};

export type DeploymentV2 = {
    /**
     * Option to shut down processes that have had no new connections or rooms
     *
     * @remarks
     * for five minutes.
     */
    idleTimeoutEnabled: boolean;
    /**
     * The environment variable that our process will have access to at runtime.
     */
    env: Array<DeploymentV2Env>;
    /**
     * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
     */
    roomsPerProcess: number;
    /**
     * Additional ports your server listens on.
     */
    additionalContainerPorts: Array<ContainerPort>;
    /**
     * A container port object represents the transport configruations for how your server will listen.
     */
    defaultContainerPort: ContainerPort;
    /**
     * When the deployment was created.
     */
    createdAt: Date;
    createdBy: string;
    /**
     * The amount of memory allocated to your process.
     */
    requestedMemoryMB: number;
    /**
     * The number of cores allocated to your process.
     */
    requestedCPU: number;
    /**
     * System generated id for a deployment. Increments by 1.
     */
    deploymentId: number;
    /**
     * System generated id for a build. Increments by 1.
     */
    buildId: number;
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
};

/** @internal */
export const DeploymentV2Env$inboundSchema: z.ZodType<DeploymentV2Env, z.ZodTypeDef, unknown> =
    z.object({
        value: z.string(),
        name: z.string(),
    });

/** @internal */
export type DeploymentV2Env$Outbound = {
    value: string;
    name: string;
};

/** @internal */
export const DeploymentV2Env$outboundSchema: z.ZodType<
    DeploymentV2Env$Outbound,
    z.ZodTypeDef,
    DeploymentV2Env
> = z.object({
    value: z.string(),
    name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentV2Env$ {
    /** @deprecated use `DeploymentV2Env$inboundSchema` instead. */
    export const inboundSchema = DeploymentV2Env$inboundSchema;
    /** @deprecated use `DeploymentV2Env$outboundSchema` instead. */
    export const outboundSchema = DeploymentV2Env$outboundSchema;
    /** @deprecated use `DeploymentV2Env$Outbound` instead. */
    export type Outbound = DeploymentV2Env$Outbound;
}

/** @internal */
export const DeploymentV2$inboundSchema: z.ZodType<DeploymentV2, z.ZodTypeDef, unknown> = z.object({
    idleTimeoutEnabled: z.boolean(),
    env: z.array(z.lazy(() => DeploymentV2Env$inboundSchema)),
    roomsPerProcess: z.number().int(),
    additionalContainerPorts: z.array(ContainerPort$inboundSchema),
    defaultContainerPort: ContainerPort$inboundSchema,
    createdAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    createdBy: z.string(),
    requestedMemoryMB: z.number(),
    requestedCPU: z.number(),
    deploymentId: z.number().int(),
    buildId: z.number().int(),
    appId: z.string(),
});

/** @internal */
export type DeploymentV2$Outbound = {
    idleTimeoutEnabled: boolean;
    env: Array<DeploymentV2Env$Outbound>;
    roomsPerProcess: number;
    additionalContainerPorts: Array<ContainerPort$Outbound>;
    defaultContainerPort: ContainerPort$Outbound;
    createdAt: string;
    createdBy: string;
    requestedMemoryMB: number;
    requestedCPU: number;
    deploymentId: number;
    buildId: number;
    appId: string;
};

/** @internal */
export const DeploymentV2$outboundSchema: z.ZodType<
    DeploymentV2$Outbound,
    z.ZodTypeDef,
    DeploymentV2
> = z.object({
    idleTimeoutEnabled: z.boolean(),
    env: z.array(z.lazy(() => DeploymentV2Env$outboundSchema)),
    roomsPerProcess: z.number().int(),
    additionalContainerPorts: z.array(ContainerPort$outboundSchema),
    defaultContainerPort: ContainerPort$outboundSchema,
    createdAt: z.date().transform((v) => v.toISOString()),
    createdBy: z.string(),
    requestedMemoryMB: z.number(),
    requestedCPU: z.number(),
    deploymentId: z.number().int(),
    buildId: z.number().int(),
    appId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentV2$ {
    /** @deprecated use `DeploymentV2$inboundSchema` instead. */
    export const inboundSchema = DeploymentV2$inboundSchema;
    /** @deprecated use `DeploymentV2$outboundSchema` instead. */
    export const outboundSchema = DeploymentV2$outboundSchema;
    /** @deprecated use `DeploymentV2$Outbound` instead. */
    export type Outbound = DeploymentV2$Outbound;
}
