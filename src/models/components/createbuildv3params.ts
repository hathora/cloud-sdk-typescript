/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateBuildV3Params = {
  /**
   * System generated id for a build. Can also be user defined when creating a build.
   */
  buildId?: string | undefined;
  /**
   * Tag to associate an external version with a build. It is accessible via [`GetBuild()`](https://hathora.dev/api#tag/BuildsV3/operation/GetBuild).
   */
  buildTag?: string | undefined;
};

/** @internal */
export const CreateBuildV3Params$inboundSchema: z.ZodType<
  CreateBuildV3Params,
  z.ZodTypeDef,
  unknown
> = z.object({
  buildId: z.string().optional(),
  buildTag: z.string().optional(),
});

/** @internal */
export type CreateBuildV3Params$Outbound = {
  buildId?: string | undefined;
  buildTag?: string | undefined;
};

/** @internal */
export const CreateBuildV3Params$outboundSchema: z.ZodType<
  CreateBuildV3Params$Outbound,
  z.ZodTypeDef,
  CreateBuildV3Params
> = z.object({
  buildId: z.string().optional(),
  buildTag: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBuildV3Params$ {
  /** @deprecated use `CreateBuildV3Params$inboundSchema` instead. */
  export const inboundSchema = CreateBuildV3Params$inboundSchema;
  /** @deprecated use `CreateBuildV3Params$outboundSchema` instead. */
  export const outboundSchema = CreateBuildV3Params$outboundSchema;
  /** @deprecated use `CreateBuildV3Params$Outbound` instead. */
  export type Outbound = CreateBuildV3Params$Outbound;
}

export function createBuildV3ParamsToJSON(
  createBuildV3Params: CreateBuildV3Params,
): string {
  return JSON.stringify(
    CreateBuildV3Params$outboundSchema.parse(createBuildV3Params),
  );
}

export function createBuildV3ParamsFromJSON(
  jsonString: string,
): SafeParseResult<CreateBuildV3Params, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBuildV3Params$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBuildV3Params' from JSON`,
  );
}
