/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Construct a type with a set of properties K of type T
 */
export type DeletedBuild = {};

/** @internal */
export const DeletedBuild$inboundSchema: z.ZodType<
  DeletedBuild,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DeletedBuild$Outbound = {};

/** @internal */
export const DeletedBuild$outboundSchema: z.ZodType<
  DeletedBuild$Outbound,
  z.ZodTypeDef,
  DeletedBuild
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletedBuild$ {
  /** @deprecated use `DeletedBuild$inboundSchema` instead. */
  export const inboundSchema = DeletedBuild$inboundSchema;
  /** @deprecated use `DeletedBuild$outboundSchema` instead. */
  export const outboundSchema = DeletedBuild$outboundSchema;
  /** @deprecated use `DeletedBuild$Outbound` instead. */
  export type Outbound = DeletedBuild$Outbound;
}

export function deletedBuildToJSON(deletedBuild: DeletedBuild): string {
  return JSON.stringify(DeletedBuild$outboundSchema.parse(deletedBuild));
}

export function deletedBuildFromJSON(
  jsonString: string,
): SafeParseResult<DeletedBuild, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletedBuild$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletedBuild' from JSON`,
  );
}
