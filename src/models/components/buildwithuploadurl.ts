/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    BuildStatus,
    BuildStatus$inboundSchema,
    BuildStatus$outboundSchema,
} from "./buildstatus.js";
import { Region, Region$inboundSchema, Region$outboundSchema } from "./region.js";
import * as z from "zod";

export type BuildWithUploadUrlRegionalContainerTags = {
    containerTag: string;
    region: Region;
};

export type UploadBodyParams = {
    value: string;
    key: string;
};

/**
 * A build represents a game server artifact and its associated metadata.
 */
export type BuildWithUploadUrl = {
    buildTag?: string | null | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    regionalContainerTags: Array<BuildWithUploadUrlRegionalContainerTags>;
    /**
     * The size (in bytes) of the Docker image built by Hathora.
     */
    imageSize: number;
    status: BuildStatus;
    /**
     * When the build was deleted.
     */
    deletedAt: Date | null;
    /**
     * When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild) finished executing.
     */
    finishedAt: Date | null;
    /**
     * When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild) is called.
     */
    startedAt: Date | null;
    /**
     * When [`CreateBuild()`](https://hathora.dev/api#tag/BuildV2/operation/CreateBuild) is called.
     */
    createdAt: Date;
    createdBy: string;
    /**
     * System generated id for a build. Increments by 1.
     */
    buildId: number;
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
    uploadBodyParams: Array<UploadBodyParams>;
    uploadUrl: string;
};

/** @internal */
export const BuildWithUploadUrlRegionalContainerTags$inboundSchema: z.ZodType<
    BuildWithUploadUrlRegionalContainerTags,
    z.ZodTypeDef,
    unknown
> = z.object({
    containerTag: z.string(),
    region: Region$inboundSchema,
});

/** @internal */
export type BuildWithUploadUrlRegionalContainerTags$Outbound = {
    containerTag: string;
    region: string;
};

/** @internal */
export const BuildWithUploadUrlRegionalContainerTags$outboundSchema: z.ZodType<
    BuildWithUploadUrlRegionalContainerTags$Outbound,
    z.ZodTypeDef,
    BuildWithUploadUrlRegionalContainerTags
> = z.object({
    containerTag: z.string(),
    region: Region$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuildWithUploadUrlRegionalContainerTags$ {
    /** @deprecated use `BuildWithUploadUrlRegionalContainerTags$inboundSchema` instead. */
    export const inboundSchema = BuildWithUploadUrlRegionalContainerTags$inboundSchema;
    /** @deprecated use `BuildWithUploadUrlRegionalContainerTags$outboundSchema` instead. */
    export const outboundSchema = BuildWithUploadUrlRegionalContainerTags$outboundSchema;
    /** @deprecated use `BuildWithUploadUrlRegionalContainerTags$Outbound` instead. */
    export type Outbound = BuildWithUploadUrlRegionalContainerTags$Outbound;
}

/** @internal */
export const UploadBodyParams$inboundSchema: z.ZodType<UploadBodyParams, z.ZodTypeDef, unknown> =
    z.object({
        value: z.string(),
        key: z.string(),
    });

/** @internal */
export type UploadBodyParams$Outbound = {
    value: string;
    key: string;
};

/** @internal */
export const UploadBodyParams$outboundSchema: z.ZodType<
    UploadBodyParams$Outbound,
    z.ZodTypeDef,
    UploadBodyParams
> = z.object({
    value: z.string(),
    key: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadBodyParams$ {
    /** @deprecated use `UploadBodyParams$inboundSchema` instead. */
    export const inboundSchema = UploadBodyParams$inboundSchema;
    /** @deprecated use `UploadBodyParams$outboundSchema` instead. */
    export const outboundSchema = UploadBodyParams$outboundSchema;
    /** @deprecated use `UploadBodyParams$Outbound` instead. */
    export type Outbound = UploadBodyParams$Outbound;
}

/** @internal */
export const BuildWithUploadUrl$inboundSchema: z.ZodType<
    BuildWithUploadUrl,
    z.ZodTypeDef,
    unknown
> = z.object({
    buildTag: z.nullable(z.string()).optional(),
    regionalContainerTags: z.array(
        z.lazy(() => BuildWithUploadUrlRegionalContainerTags$inboundSchema)
    ),
    imageSize: z.number().int(),
    status: BuildStatus$inboundSchema,
    deletedAt: z.nullable(
        z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
    ),
    finishedAt: z.nullable(
        z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
    ),
    startedAt: z.nullable(
        z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
    ),
    createdAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    createdBy: z.string(),
    buildId: z.number().int(),
    appId: z.string(),
    uploadBodyParams: z.array(z.lazy(() => UploadBodyParams$inboundSchema)),
    uploadUrl: z.string(),
});

/** @internal */
export type BuildWithUploadUrl$Outbound = {
    buildTag?: string | null | undefined;
    regionalContainerTags: Array<BuildWithUploadUrlRegionalContainerTags$Outbound>;
    imageSize: number;
    status: string;
    deletedAt: string | null;
    finishedAt: string | null;
    startedAt: string | null;
    createdAt: string;
    createdBy: string;
    buildId: number;
    appId: string;
    uploadBodyParams: Array<UploadBodyParams$Outbound>;
    uploadUrl: string;
};

/** @internal */
export const BuildWithUploadUrl$outboundSchema: z.ZodType<
    BuildWithUploadUrl$Outbound,
    z.ZodTypeDef,
    BuildWithUploadUrl
> = z.object({
    buildTag: z.nullable(z.string()).optional(),
    regionalContainerTags: z.array(
        z.lazy(() => BuildWithUploadUrlRegionalContainerTags$outboundSchema)
    ),
    imageSize: z.number().int(),
    status: BuildStatus$outboundSchema,
    deletedAt: z.nullable(z.date().transform((v) => v.toISOString())),
    finishedAt: z.nullable(z.date().transform((v) => v.toISOString())),
    startedAt: z.nullable(z.date().transform((v) => v.toISOString())),
    createdAt: z.date().transform((v) => v.toISOString()),
    createdBy: z.string(),
    buildId: z.number().int(),
    appId: z.string(),
    uploadBodyParams: z.array(z.lazy(() => UploadBodyParams$outboundSchema)),
    uploadUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuildWithUploadUrl$ {
    /** @deprecated use `BuildWithUploadUrl$inboundSchema` instead. */
    export const inboundSchema = BuildWithUploadUrl$inboundSchema;
    /** @deprecated use `BuildWithUploadUrl$outboundSchema` instead. */
    export const outboundSchema = BuildWithUploadUrl$outboundSchema;
    /** @deprecated use `BuildWithUploadUrl$Outbound` instead. */
    export type Outbound = BuildWithUploadUrl$Outbound;
}
