/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    BuildStatus,
    BuildStatus$inboundSchema,
    BuildStatus$outboundSchema,
} from "./buildstatus.js";
import * as z from "zod";

/**
 * A build represents a game server artifact and its associated metadata.
 */
export type BuildV3 = {
    contentHash?: string | undefined;
    /**
     * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV2/operation/GetBuildInfo).
     */
    buildTag?: string | undefined;
    /**
     * The size (in bytes) of the Docker image built by Hathora.
     */
    imageSize: number;
    status: BuildStatus;
    /**
     * When the build was deleted.
     */
    deletedAt: Date | null;
    /**
     * When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild) finished executing.
     */
    finishedAt: Date | null;
    /**
     * When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild) is called.
     */
    startedAt: Date | null;
    /**
     * When [`CreateBuild()`](https://hathora.dev/api#tag/BuildV2/operation/CreateBuild) is called.
     */
    createdAt: Date;
    createdBy: string;
    /**
     * System generated id for a build. Can also be user defined when creating a build.
     */
    buildId: string;
    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    orgId: string;
};

/** @internal */
export const BuildV3$inboundSchema: z.ZodType<BuildV3, z.ZodTypeDef, unknown> = z.object({
    contentHash: z.string().optional(),
    buildTag: z.string().optional(),
    imageSize: z.number().int(),
    status: BuildStatus$inboundSchema,
    deletedAt: z.nullable(
        z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
    ),
    finishedAt: z.nullable(
        z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
    ),
    startedAt: z.nullable(
        z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
    ),
    createdAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    createdBy: z.string(),
    buildId: z.string(),
    orgId: z.string(),
});

/** @internal */
export type BuildV3$Outbound = {
    contentHash?: string | undefined;
    buildTag?: string | undefined;
    imageSize: number;
    status: string;
    deletedAt: string | null;
    finishedAt: string | null;
    startedAt: string | null;
    createdAt: string;
    createdBy: string;
    buildId: string;
    orgId: string;
};

/** @internal */
export const BuildV3$outboundSchema: z.ZodType<BuildV3$Outbound, z.ZodTypeDef, BuildV3> = z.object({
    contentHash: z.string().optional(),
    buildTag: z.string().optional(),
    imageSize: z.number().int(),
    status: BuildStatus$outboundSchema,
    deletedAt: z.nullable(z.date().transform((v) => v.toISOString())),
    finishedAt: z.nullable(z.date().transform((v) => v.toISOString())),
    startedAt: z.nullable(z.date().transform((v) => v.toISOString())),
    createdAt: z.date().transform((v) => v.toISOString()),
    createdBy: z.string(),
    buildId: z.string(),
    orgId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuildV3$ {
    /** @deprecated use `BuildV3$inboundSchema` instead. */
    export const inboundSchema = BuildV3$inboundSchema;
    /** @deprecated use `BuildV3$outboundSchema` instead. */
    export const outboundSchema = BuildV3$outboundSchema;
    /** @deprecated use `BuildV3$Outbound` instead. */
    export type Outbound = BuildV3$Outbound;
}
