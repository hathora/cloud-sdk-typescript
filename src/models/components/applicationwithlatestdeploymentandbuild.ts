/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AuthConfiguration, AuthConfiguration$ } from "./authconfiguration";
import { Build, Build$ } from "./build";
import { ContainerPort, ContainerPort$ } from "./containerport";
import * as z from "zod";

export type ApplicationWithLatestDeploymentAndBuildEnv = {
    value: string;
    name: string;
};

export type ApplicationWithLatestDeploymentAndBuildDeployment = {
    /**
     * Option to shut down processes that have had no new connections or rooms
     *
     * @remarks
     * for five minutes.
     */
    idleTimeoutEnabled: boolean;
    /**
     * The environment variable that our process will have access to at runtime.
     */
    env: Array<ApplicationWithLatestDeploymentAndBuildEnv>;
    /**
     * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
     */
    roomsPerProcess: number;
    /**
     * Additional ports your server listens on.
     */
    additionalContainerPorts: Array<ContainerPort>;
    /**
     * A container port object represents the transport configruations for how your server will listen.
     */
    defaultContainerPort: ContainerPort;
    /**
     * When the deployment was created.
     */
    createdAt: Date;
    /**
     * UserId or email address for the user that created the deployment.
     */
    createdBy: string;
    /**
     * The amount of memory allocated to your process.
     */
    requestedMemoryMB: number;
    /**
     * The number of cores allocated to your process.
     */
    requestedCPU: number;
    /**
     * System generated id for a deployment. Increments by 1.
     */
    deploymentId: number;
    /**
     * System generated id for a build. Increments by 1.
     */
    buildId: number;
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
    /**
     * A build represents a game server artifact and its associated metadata.
     */
    build: Build;
};

/**
 * An application object is the top level namespace for the game server.
 */
export type ApplicationWithLatestDeploymentAndBuild = {
    /**
     * UserId or email address for the user that deleted the application.
     */
    deletedBy: string | null;
    /**
     * When the application was deleted.
     */
    deletedAt: Date | null;
    /**
     * When the application was created.
     */
    createdAt: Date;
    /**
     * UserId or email address for the user that created the application.
     */
    createdBy: string;
    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    orgId: string;
    /**
     * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    authConfiguration: AuthConfiguration;
    /**
     * Secret that is used for identity and access management.
     */
    appSecret: string;
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
    /**
     * Readable name for an application. Must be unique within an organization.
     */
    appName: string;
    deployment?: ApplicationWithLatestDeploymentAndBuildDeployment | undefined;
};

/** @internal */
export namespace ApplicationWithLatestDeploymentAndBuildEnv$ {
    export const inboundSchema: z.ZodType<
        ApplicationWithLatestDeploymentAndBuildEnv,
        z.ZodTypeDef,
        unknown
    > = z.object({
        value: z.string(),
        name: z.string(),
    });

    export type Outbound = {
        value: string;
        name: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ApplicationWithLatestDeploymentAndBuildEnv
    > = z.object({
        value: z.string(),
        name: z.string(),
    });
}

/** @internal */
export namespace ApplicationWithLatestDeploymentAndBuildDeployment$ {
    export const inboundSchema: z.ZodType<
        ApplicationWithLatestDeploymentAndBuildDeployment,
        z.ZodTypeDef,
        unknown
    > = z.object({
        idleTimeoutEnabled: z.boolean(),
        env: z.array(z.lazy(() => ApplicationWithLatestDeploymentAndBuildEnv$.inboundSchema)),
        roomsPerProcess: z.number().int(),
        additionalContainerPorts: z.array(ContainerPort$.inboundSchema),
        defaultContainerPort: ContainerPort$.inboundSchema,
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        createdBy: z.string(),
        requestedMemoryMB: z.number(),
        requestedCPU: z.number(),
        deploymentId: z.number().int(),
        buildId: z.number().int(),
        appId: z.string(),
        build: Build$.inboundSchema,
    });

    export type Outbound = {
        idleTimeoutEnabled: boolean;
        env: Array<ApplicationWithLatestDeploymentAndBuildEnv$.Outbound>;
        roomsPerProcess: number;
        additionalContainerPorts: Array<ContainerPort$.Outbound>;
        defaultContainerPort: ContainerPort$.Outbound;
        createdAt: string;
        createdBy: string;
        requestedMemoryMB: number;
        requestedCPU: number;
        deploymentId: number;
        buildId: number;
        appId: string;
        build: Build$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ApplicationWithLatestDeploymentAndBuildDeployment
    > = z.object({
        idleTimeoutEnabled: z.boolean(),
        env: z.array(z.lazy(() => ApplicationWithLatestDeploymentAndBuildEnv$.outboundSchema)),
        roomsPerProcess: z.number().int(),
        additionalContainerPorts: z.array(ContainerPort$.outboundSchema),
        defaultContainerPort: ContainerPort$.outboundSchema,
        createdAt: z.date().transform((v) => v.toISOString()),
        createdBy: z.string(),
        requestedMemoryMB: z.number(),
        requestedCPU: z.number(),
        deploymentId: z.number().int(),
        buildId: z.number().int(),
        appId: z.string(),
        build: Build$.outboundSchema,
    });
}

/** @internal */
export namespace ApplicationWithLatestDeploymentAndBuild$ {
    export const inboundSchema: z.ZodType<
        ApplicationWithLatestDeploymentAndBuild,
        z.ZodTypeDef,
        unknown
    > = z.object({
        deletedBy: z.nullable(z.string()),
        deletedAt: z.nullable(
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
        ),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        createdBy: z.string(),
        orgId: z.string(),
        authConfiguration: AuthConfiguration$.inboundSchema,
        appSecret: z.string(),
        appId: z.string(),
        appName: z.string(),
        deployment: z
            .lazy(() => ApplicationWithLatestDeploymentAndBuildDeployment$.inboundSchema)
            .optional(),
    });

    export type Outbound = {
        deletedBy: string | null;
        deletedAt: string | null;
        createdAt: string;
        createdBy: string;
        orgId: string;
        authConfiguration: AuthConfiguration$.Outbound;
        appSecret: string;
        appId: string;
        appName: string;
        deployment?: ApplicationWithLatestDeploymentAndBuildDeployment$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ApplicationWithLatestDeploymentAndBuild
    > = z.object({
        deletedBy: z.nullable(z.string()),
        deletedAt: z.nullable(z.date().transform((v) => v.toISOString())),
        createdAt: z.date().transform((v) => v.toISOString()),
        createdBy: z.string(),
        orgId: z.string(),
        authConfiguration: AuthConfiguration$.outboundSchema,
        appSecret: z.string(),
        appId: z.string(),
        appName: z.string(),
        deployment: z
            .lazy(() => ApplicationWithLatestDeploymentAndBuildDeployment$.outboundSchema)
            .optional(),
    });
}
