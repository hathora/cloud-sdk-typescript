/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NicknameObject = {
  /**
   * An alias to represent a player.
   */
  nickname: string;
};

/** @internal */
export const NicknameObject$inboundSchema: z.ZodType<
  NicknameObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  nickname: z.string(),
});

/** @internal */
export type NicknameObject$Outbound = {
  nickname: string;
};

/** @internal */
export const NicknameObject$outboundSchema: z.ZodType<
  NicknameObject$Outbound,
  z.ZodTypeDef,
  NicknameObject
> = z.object({
  nickname: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NicknameObject$ {
  /** @deprecated use `NicknameObject$inboundSchema` instead. */
  export const inboundSchema = NicknameObject$inboundSchema;
  /** @deprecated use `NicknameObject$outboundSchema` instead. */
  export const outboundSchema = NicknameObject$outboundSchema;
  /** @deprecated use `NicknameObject$Outbound` instead. */
  export type Outbound = NicknameObject$Outbound;
}

export function nicknameObjectToJSON(nicknameObject: NicknameObject): string {
  return JSON.stringify(NicknameObject$outboundSchema.parse(nicknameObject));
}

export function nicknameObjectFromJSON(
  jsonString: string,
): SafeParseResult<NicknameObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NicknameObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NicknameObject' from JSON`,
  );
}
