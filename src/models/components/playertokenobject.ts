/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type PlayerTokenObject = {
    /**
     * A unique Hathora-signed JWT player token.
     */
    token: string;
};

/** @internal */
export const PlayerTokenObject$inboundSchema: z.ZodType<PlayerTokenObject, z.ZodTypeDef, unknown> =
    z.object({
        token: z.string(),
    });

/** @internal */
export type PlayerTokenObject$Outbound = {
    token: string;
};

/** @internal */
export const PlayerTokenObject$outboundSchema: z.ZodType<
    PlayerTokenObject$Outbound,
    z.ZodTypeDef,
    PlayerTokenObject
> = z.object({
    token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlayerTokenObject$ {
    /** @deprecated use `PlayerTokenObject$inboundSchema` instead. */
    export const inboundSchema = PlayerTokenObject$inboundSchema;
    /** @deprecated use `PlayerTokenObject$outboundSchema` instead. */
    export const outboundSchema = PlayerTokenObject$outboundSchema;
    /** @deprecated use `PlayerTokenObject$Outbound` instead. */
    export type Outbound = PlayerTokenObject$Outbound;
}
