/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LoadBalancerConfig,
  LoadBalancerConfig$inboundSchema,
  LoadBalancerConfig$Outbound,
  LoadBalancerConfig$outboundSchema,
} from "./loadbalancerconfig.js";
import {
  ProcessAutoscalerConfig,
  ProcessAutoscalerConfig$inboundSchema,
  ProcessAutoscalerConfig$Outbound,
  ProcessAutoscalerConfig$outboundSchema,
} from "./processautoscalerconfig.js";
import {
  StaticProcessAllocationConfigWrite,
  StaticProcessAllocationConfigWrite$inboundSchema,
  StaticProcessAllocationConfigWrite$Outbound,
  StaticProcessAllocationConfigWrite$outboundSchema,
} from "./staticprocessallocationconfigwrite.js";

export type ServiceConfigWrite = {
  /**
   * The configuration for the Process Autoscaler for this application.
   *
   * @remarks
   * Autoscaling must be enabled on a per-region basis.
   * EXPERIMENTAL - This feature is in closed beta.
   */
  processAutoscalerConfig?: ProcessAutoscalerConfig | undefined;
  loadBalancer?: LoadBalancerConfig | undefined;
  staticProcessAllocation: Array<StaticProcessAllocationConfigWrite>;
};

/** @internal */
export const ServiceConfigWrite$inboundSchema: z.ZodType<
  ServiceConfigWrite,
  z.ZodTypeDef,
  unknown
> = z.object({
  processAutoscalerConfig: ProcessAutoscalerConfig$inboundSchema.optional(),
  loadBalancer: LoadBalancerConfig$inboundSchema.optional(),
  staticProcessAllocation: z.array(
    StaticProcessAllocationConfigWrite$inboundSchema,
  ),
});

/** @internal */
export type ServiceConfigWrite$Outbound = {
  processAutoscalerConfig?: ProcessAutoscalerConfig$Outbound | undefined;
  loadBalancer?: LoadBalancerConfig$Outbound | undefined;
  staticProcessAllocation: Array<StaticProcessAllocationConfigWrite$Outbound>;
};

/** @internal */
export const ServiceConfigWrite$outboundSchema: z.ZodType<
  ServiceConfigWrite$Outbound,
  z.ZodTypeDef,
  ServiceConfigWrite
> = z.object({
  processAutoscalerConfig: ProcessAutoscalerConfig$outboundSchema.optional(),
  loadBalancer: LoadBalancerConfig$outboundSchema.optional(),
  staticProcessAllocation: z.array(
    StaticProcessAllocationConfigWrite$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceConfigWrite$ {
  /** @deprecated use `ServiceConfigWrite$inboundSchema` instead. */
  export const inboundSchema = ServiceConfigWrite$inboundSchema;
  /** @deprecated use `ServiceConfigWrite$outboundSchema` instead. */
  export const outboundSchema = ServiceConfigWrite$outboundSchema;
  /** @deprecated use `ServiceConfigWrite$Outbound` instead. */
  export type Outbound = ServiceConfigWrite$Outbound;
}

export function serviceConfigWriteToJSON(
  serviceConfigWrite: ServiceConfigWrite,
): string {
  return JSON.stringify(
    ServiceConfigWrite$outboundSchema.parse(serviceConfigWrite),
  );
}

export function serviceConfigWriteFromJSON(
  jsonString: string,
): SafeParseResult<ServiceConfigWrite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceConfigWrite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceConfigWrite' from JSON`,
  );
}
