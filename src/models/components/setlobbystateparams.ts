/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * JSON blob to store metadata for a room. Must be smaller than 1MB.
 */
export type SetLobbyStateParamsState = {};

export type SetLobbyStateParams = {
    /**
     * JSON blob to store metadata for a room. Must be smaller than 1MB.
     */
    state: SetLobbyStateParamsState;
};

/** @internal */
export namespace SetLobbyStateParamsState$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<SetLobbyStateParamsState, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SetLobbyStateParamsState> =
        z.object({});
}

/** @internal */
export namespace SetLobbyStateParams$ {
    export type Inbound = {
        state: SetLobbyStateParamsState$.Inbound;
    };

    export const inboundSchema: z.ZodType<SetLobbyStateParams, z.ZodTypeDef, Inbound> = z
        .object({
            state: z.lazy(() => SetLobbyStateParamsState$.inboundSchema),
        })
        .transform((v) => {
            return {
                state: v.state,
            };
        });

    export type Outbound = {
        state: SetLobbyStateParamsState$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SetLobbyStateParams> = z
        .object({
            state: z.lazy(() => SetLobbyStateParamsState$.outboundSchema),
        })
        .transform((v) => {
            return {
                state: v.state,
            };
        });
}
