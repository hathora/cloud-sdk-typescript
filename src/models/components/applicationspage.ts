/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ApplicationWithLatestDeploymentAndBuild,
  ApplicationWithLatestDeploymentAndBuild$inboundSchema,
  ApplicationWithLatestDeploymentAndBuild$Outbound,
  ApplicationWithLatestDeploymentAndBuild$outboundSchema,
} from "./applicationwithlatestdeploymentandbuild.js";

export type ApplicationsPage = {
  applications: Array<ApplicationWithLatestDeploymentAndBuild>;
};

/** @internal */
export const ApplicationsPage$inboundSchema: z.ZodType<
  ApplicationsPage,
  z.ZodTypeDef,
  unknown
> = z.object({
  applications: z.array(ApplicationWithLatestDeploymentAndBuild$inboundSchema),
});

/** @internal */
export type ApplicationsPage$Outbound = {
  applications: Array<ApplicationWithLatestDeploymentAndBuild$Outbound>;
};

/** @internal */
export const ApplicationsPage$outboundSchema: z.ZodType<
  ApplicationsPage$Outbound,
  z.ZodTypeDef,
  ApplicationsPage
> = z.object({
  applications: z.array(ApplicationWithLatestDeploymentAndBuild$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationsPage$ {
  /** @deprecated use `ApplicationsPage$inboundSchema` instead. */
  export const inboundSchema = ApplicationsPage$inboundSchema;
  /** @deprecated use `ApplicationsPage$outboundSchema` instead. */
  export const outboundSchema = ApplicationsPage$outboundSchema;
  /** @deprecated use `ApplicationsPage$Outbound` instead. */
  export type Outbound = ApplicationsPage$Outbound;
}

export function applicationsPageToJSON(
  applicationsPage: ApplicationsPage,
): string {
  return JSON.stringify(
    ApplicationsPage$outboundSchema.parse(applicationsPage),
  );
}

export function applicationsPageFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationsPage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationsPage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationsPage' from JSON`,
  );
}
