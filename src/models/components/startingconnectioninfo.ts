/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import * as z from "zod";

export const Status = {
    Starting: "starting",
} as const;
export type Status = OpenEnum<typeof Status>;

export type StartingConnectionInfo = {
    status: Status;
    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     *
     * @remarks
     * Note: error will be returned if `roomId` is not globally unique.
     */
    roomId: string;
};

/** @internal */
export namespace Status$ {
    export const inboundSchema: z.ZodType<Status, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(Status),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(Status),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace StartingConnectionInfo$ {
    export const inboundSchema: z.ZodType<StartingConnectionInfo, z.ZodTypeDef, unknown> = z.object(
        {
            status: Status$.inboundSchema,
            roomId: z.string(),
        }
    );

    export type Outbound = {
        status: string;
        roomId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StartingConnectionInfo> =
        z.object({
            status: Status$.outboundSchema,
            roomId: z.string(),
        });
}
