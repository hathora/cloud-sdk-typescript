/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The name of the metric.
 *
 * @remarks
 * Allowed values:
 * `concurrent-requests`: Tracks the number of concurrent requests that a single Process handles.
 */
export const MetricName = {
  ConcurrentRequests: "concurrent-requests",
} as const;
/**
 * The name of the metric.
 *
 * @remarks
 * Allowed values:
 * `concurrent-requests`: Tracks the number of concurrent requests that a single Process handles.
 */
export type MetricName = OpenEnum<typeof MetricName>;

export type AutoscalerTargetMetric = {
  metricValue: number;
  /**
   * The name of the metric.
   *
   * @remarks
   * Allowed values:
   * `concurrent-requests`: Tracks the number of concurrent requests that a single Process handles.
   */
  metricName: MetricName;
};

/** @internal */
export const MetricName$inboundSchema: z.ZodType<
  MetricName,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(MetricName),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const MetricName$outboundSchema: z.ZodType<
  MetricName,
  z.ZodTypeDef,
  MetricName
> = z.union([
  z.nativeEnum(MetricName),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricName$ {
  /** @deprecated use `MetricName$inboundSchema` instead. */
  export const inboundSchema = MetricName$inboundSchema;
  /** @deprecated use `MetricName$outboundSchema` instead. */
  export const outboundSchema = MetricName$outboundSchema;
}

/** @internal */
export const AutoscalerTargetMetric$inboundSchema: z.ZodType<
  AutoscalerTargetMetric,
  z.ZodTypeDef,
  unknown
> = z.object({
  metricValue: z.number(),
  metricName: MetricName$inboundSchema,
});

/** @internal */
export type AutoscalerTargetMetric$Outbound = {
  metricValue: number;
  metricName: string;
};

/** @internal */
export const AutoscalerTargetMetric$outboundSchema: z.ZodType<
  AutoscalerTargetMetric$Outbound,
  z.ZodTypeDef,
  AutoscalerTargetMetric
> = z.object({
  metricValue: z.number(),
  metricName: MetricName$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutoscalerTargetMetric$ {
  /** @deprecated use `AutoscalerTargetMetric$inboundSchema` instead. */
  export const inboundSchema = AutoscalerTargetMetric$inboundSchema;
  /** @deprecated use `AutoscalerTargetMetric$outboundSchema` instead. */
  export const outboundSchema = AutoscalerTargetMetric$outboundSchema;
  /** @deprecated use `AutoscalerTargetMetric$Outbound` instead. */
  export type Outbound = AutoscalerTargetMetric$Outbound;
}

export function autoscalerTargetMetricToJSON(
  autoscalerTargetMetric: AutoscalerTargetMetric,
): string {
  return JSON.stringify(
    AutoscalerTargetMetric$outboundSchema.parse(autoscalerTargetMetric),
  );
}

export function autoscalerTargetMetricFromJSON(
  jsonString: string,
): SafeParseResult<AutoscalerTargetMetric, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutoscalerTargetMetric$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutoscalerTargetMetric' from JSON`,
  );
}
