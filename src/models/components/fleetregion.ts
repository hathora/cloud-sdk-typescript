/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A fleet region is a region in which a fleet can be deployed.
 *
 * @remarks
 * You can update cloudMinVcpus once every five minutes. It must be a multiple of
 * scaleIncrementVcpus
 */
export type FleetRegion = {
  cloudMinVcpusUpdatedAt: Date;
  cloudMinVcpus: number;
  scaleIncrementVcpus: number;
};

/** @internal */
export const FleetRegion$inboundSchema: z.ZodType<
  FleetRegion,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloudMinVcpusUpdatedAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  cloudMinVcpus: z.number().int(),
  scaleIncrementVcpus: z.number().int(),
});

/** @internal */
export type FleetRegion$Outbound = {
  cloudMinVcpusUpdatedAt: string;
  cloudMinVcpus: number;
  scaleIncrementVcpus: number;
};

/** @internal */
export const FleetRegion$outboundSchema: z.ZodType<
  FleetRegion$Outbound,
  z.ZodTypeDef,
  FleetRegion
> = z.object({
  cloudMinVcpusUpdatedAt: z.date().transform(v => v.toISOString()),
  cloudMinVcpus: z.number().int(),
  scaleIncrementVcpus: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FleetRegion$ {
  /** @deprecated use `FleetRegion$inboundSchema` instead. */
  export const inboundSchema = FleetRegion$inboundSchema;
  /** @deprecated use `FleetRegion$outboundSchema` instead. */
  export const outboundSchema = FleetRegion$outboundSchema;
  /** @deprecated use `FleetRegion$Outbound` instead. */
  export type Outbound = FleetRegion$Outbound;
}

export function fleetRegionToJSON(fleetRegion: FleetRegion): string {
  return JSON.stringify(FleetRegion$outboundSchema.parse(fleetRegion));
}

export function fleetRegionFromJSON(
  jsonString: string,
): SafeParseResult<FleetRegion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FleetRegion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FleetRegion' from JSON`,
  );
}
