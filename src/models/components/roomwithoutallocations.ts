/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RoomStatus, RoomStatus$ } from "./roomstatus";
import * as z from "zod";

/**
 * Metadata on an allocated instance of a room.
 */
export type CurrentAllocation = {
    unscheduledAt: Date | null;
    scheduledAt: Date;
    /**
     * System generated unique identifier to a runtime instance of your game server.
     */
    processId: string;
    /**
     * System generated unique identifier to an allocated instance of a room.
     */
    roomAllocationId: string;
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
export type RoomWithoutAllocations = {
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     *
     * @remarks
     * Note: error will be returned if `roomId` is not globally unique.
     */
    roomId: string;
    roomConfig: string | null;
    /**
     * The allocation status of a room.
     *
     * @remarks
     *
     * `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
     *
     * `active`: ready to accept connections
     *
     * `suspended`: room is unallocated from the process but can be rescheduled later with the same `roomId`
     *
     * `destroyed`: all associated metadata is deleted
     */
    status: RoomStatus;
    currentAllocation: CurrentAllocation | null;
};

/** @internal */
export namespace CurrentAllocation$ {
    export type Inbound = {
        unscheduledAt: string | null;
        scheduledAt: string;
        processId: string;
        roomAllocationId: string;
    };

    export const inboundSchema: z.ZodType<CurrentAllocation, z.ZodTypeDef, Inbound> = z
        .object({
            unscheduledAt: z.nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            ),
            scheduledAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            processId: z.string(),
            roomAllocationId: z.string(),
        })
        .transform((v) => {
            return {
                unscheduledAt: v.unscheduledAt,
                scheduledAt: v.scheduledAt,
                processId: v.processId,
                roomAllocationId: v.roomAllocationId,
            };
        });

    export type Outbound = {
        unscheduledAt: string | null;
        scheduledAt: string;
        processId: string;
        roomAllocationId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CurrentAllocation> = z
        .object({
            unscheduledAt: z.nullable(z.date().transform((v) => v.toISOString())),
            scheduledAt: z.date().transform((v) => v.toISOString()),
            processId: z.string(),
            roomAllocationId: z.string(),
        })
        .transform((v) => {
            return {
                unscheduledAt: v.unscheduledAt,
                scheduledAt: v.scheduledAt,
                processId: v.processId,
                roomAllocationId: v.roomAllocationId,
            };
        });
}

/** @internal */
export namespace RoomWithoutAllocations$ {
    export type Inbound = {
        appId: string;
        roomId: string;
        roomConfig: string | null;
        status: RoomStatus;
        currentAllocation: CurrentAllocation$.Inbound | null;
    };

    export const inboundSchema: z.ZodType<RoomWithoutAllocations, z.ZodTypeDef, Inbound> = z
        .object({
            appId: z.string(),
            roomId: z.string(),
            roomConfig: z.nullable(z.string()),
            status: RoomStatus$,
            currentAllocation: z.nullable(z.lazy(() => CurrentAllocation$.inboundSchema)),
        })
        .transform((v) => {
            return {
                appId: v.appId,
                roomId: v.roomId,
                roomConfig: v.roomConfig,
                status: v.status,
                currentAllocation: v.currentAllocation,
            };
        });

    export type Outbound = {
        appId: string;
        roomId: string;
        roomConfig: string | null;
        status: RoomStatus;
        currentAllocation: CurrentAllocation$.Outbound | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RoomWithoutAllocations> = z
        .object({
            appId: z.string(),
            roomId: z.string(),
            roomConfig: z.nullable(z.string()),
            status: RoomStatus$,
            currentAllocation: z.nullable(z.lazy(() => CurrentAllocation$.outboundSchema)),
        })
        .transform((v) => {
            return {
                appId: v.appId,
                roomId: v.roomId,
                roomConfig: v.roomConfig,
                status: v.status,
                currentAllocation: v.currentAllocation,
            };
        });
}
