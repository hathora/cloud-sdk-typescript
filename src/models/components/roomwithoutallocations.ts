/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    RoomAllocation,
    RoomAllocation$inboundSchema,
    RoomAllocation$Outbound,
    RoomAllocation$outboundSchema,
} from "./roomallocation.js";
import { RoomStatus, RoomStatus$inboundSchema, RoomStatus$outboundSchema } from "./roomstatus.js";
import * as z from "zod";

/**
 * From T, pick a set of properties whose keys are in the union K
 */
export type RoomWithoutAllocations = {
    appId: string;
    roomId: string;
    roomConfig?: string | undefined;
    /**
     * The allocation status of a room.
     *
     * @remarks
     *
     * `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
     *
     * `active`: ready to accept connections
     *
     * `destroyed`: all associated metadata is deleted
     */
    status: RoomStatus;
    /**
     * Metadata on an allocated instance of a room.
     */
    currentAllocation: RoomAllocation;
};

/** @internal */
export const RoomWithoutAllocations$inboundSchema: z.ZodType<
    RoomWithoutAllocations,
    z.ZodTypeDef,
    unknown
> = z.object({
    appId: z.string(),
    roomId: z.string(),
    roomConfig: z.string().optional(),
    status: RoomStatus$inboundSchema,
    currentAllocation: RoomAllocation$inboundSchema,
});

/** @internal */
export type RoomWithoutAllocations$Outbound = {
    appId: string;
    roomId: string;
    roomConfig?: string | undefined;
    status: string;
    currentAllocation: RoomAllocation$Outbound;
};

/** @internal */
export const RoomWithoutAllocations$outboundSchema: z.ZodType<
    RoomWithoutAllocations$Outbound,
    z.ZodTypeDef,
    RoomWithoutAllocations
> = z.object({
    appId: z.string(),
    roomId: z.string(),
    roomConfig: z.string().optional(),
    status: RoomStatus$outboundSchema,
    currentAllocation: RoomAllocation$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoomWithoutAllocations$ {
    /** @deprecated use `RoomWithoutAllocations$inboundSchema` instead. */
    export const inboundSchema = RoomWithoutAllocations$inboundSchema;
    /** @deprecated use `RoomWithoutAllocations$outboundSchema` instead. */
    export const outboundSchema = RoomWithoutAllocations$outboundSchema;
    /** @deprecated use `RoomWithoutAllocations$Outbound` instead. */
    export type Outbound = RoomWithoutAllocations$Outbound;
}
