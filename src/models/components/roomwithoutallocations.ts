/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RoomStatus,
  RoomStatus$inboundSchema,
  RoomStatus$outboundSchema,
} from "./roomstatus.js";

/**
 * Metadata on an allocated instance of a room.
 */
export type RoomWithoutAllocationsCurrentAllocation = {
  unscheduledAt: Date | null;
  scheduledAt: Date;
  /**
   * System generated unique identifier to a runtime instance of your game server.
   */
  processId: string;
  /**
   * System generated unique identifier to an allocated instance of a room.
   */
  roomAllocationId: string;
};

export type RoomWithoutAllocations = {
  currentAllocation: RoomWithoutAllocationsCurrentAllocation | null;
  /**
   * The allocation status of a room.
   *
   * @remarks
   *
   * `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
   *
   * `active`: ready to accept connections
   *
   * `destroyed`: all associated metadata is deleted
   */
  status: RoomStatus;
  roomConfig?: string | null | undefined;
  /**
   * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
   *
   * @remarks
   * Note: error will be returned if `roomId` is not globally unique.
   */
  roomId: string;
  /**
   * System generated unique identifier for an application.
   */
  appId: string;
};

/** @internal */
export const RoomWithoutAllocationsCurrentAllocation$inboundSchema: z.ZodType<
  RoomWithoutAllocationsCurrentAllocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  unscheduledAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  scheduledAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  processId: z.string(),
  roomAllocationId: z.string(),
});

/** @internal */
export type RoomWithoutAllocationsCurrentAllocation$Outbound = {
  unscheduledAt: string | null;
  scheduledAt: string;
  processId: string;
  roomAllocationId: string;
};

/** @internal */
export const RoomWithoutAllocationsCurrentAllocation$outboundSchema: z.ZodType<
  RoomWithoutAllocationsCurrentAllocation$Outbound,
  z.ZodTypeDef,
  RoomWithoutAllocationsCurrentAllocation
> = z.object({
  unscheduledAt: z.nullable(z.date().transform(v => v.toISOString())),
  scheduledAt: z.date().transform(v => v.toISOString()),
  processId: z.string(),
  roomAllocationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoomWithoutAllocationsCurrentAllocation$ {
  /** @deprecated use `RoomWithoutAllocationsCurrentAllocation$inboundSchema` instead. */
  export const inboundSchema =
    RoomWithoutAllocationsCurrentAllocation$inboundSchema;
  /** @deprecated use `RoomWithoutAllocationsCurrentAllocation$outboundSchema` instead. */
  export const outboundSchema =
    RoomWithoutAllocationsCurrentAllocation$outboundSchema;
  /** @deprecated use `RoomWithoutAllocationsCurrentAllocation$Outbound` instead. */
  export type Outbound = RoomWithoutAllocationsCurrentAllocation$Outbound;
}

export function roomWithoutAllocationsCurrentAllocationToJSON(
  roomWithoutAllocationsCurrentAllocation:
    RoomWithoutAllocationsCurrentAllocation,
): string {
  return JSON.stringify(
    RoomWithoutAllocationsCurrentAllocation$outboundSchema.parse(
      roomWithoutAllocationsCurrentAllocation,
    ),
  );
}

export function roomWithoutAllocationsCurrentAllocationFromJSON(
  jsonString: string,
): SafeParseResult<
  RoomWithoutAllocationsCurrentAllocation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RoomWithoutAllocationsCurrentAllocation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RoomWithoutAllocationsCurrentAllocation' from JSON`,
  );
}

/** @internal */
export const RoomWithoutAllocations$inboundSchema: z.ZodType<
  RoomWithoutAllocations,
  z.ZodTypeDef,
  unknown
> = z.object({
  currentAllocation: z.nullable(
    z.lazy(() => RoomWithoutAllocationsCurrentAllocation$inboundSchema),
  ),
  status: RoomStatus$inboundSchema,
  roomConfig: z.nullable(z.string()).optional(),
  roomId: z.string(),
  appId: z.string(),
});

/** @internal */
export type RoomWithoutAllocations$Outbound = {
  currentAllocation: RoomWithoutAllocationsCurrentAllocation$Outbound | null;
  status: string;
  roomConfig?: string | null | undefined;
  roomId: string;
  appId: string;
};

/** @internal */
export const RoomWithoutAllocations$outboundSchema: z.ZodType<
  RoomWithoutAllocations$Outbound,
  z.ZodTypeDef,
  RoomWithoutAllocations
> = z.object({
  currentAllocation: z.nullable(
    z.lazy(() => RoomWithoutAllocationsCurrentAllocation$outboundSchema),
  ),
  status: RoomStatus$outboundSchema,
  roomConfig: z.nullable(z.string()).optional(),
  roomId: z.string(),
  appId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoomWithoutAllocations$ {
  /** @deprecated use `RoomWithoutAllocations$inboundSchema` instead. */
  export const inboundSchema = RoomWithoutAllocations$inboundSchema;
  /** @deprecated use `RoomWithoutAllocations$outboundSchema` instead. */
  export const outboundSchema = RoomWithoutAllocations$outboundSchema;
  /** @deprecated use `RoomWithoutAllocations$Outbound` instead. */
  export type Outbound = RoomWithoutAllocations$Outbound;
}

export function roomWithoutAllocationsToJSON(
  roomWithoutAllocations: RoomWithoutAllocations,
): string {
  return JSON.stringify(
    RoomWithoutAllocations$outboundSchema.parse(roomWithoutAllocations),
  );
}

export function roomWithoutAllocationsFromJSON(
  jsonString: string,
): SafeParseResult<RoomWithoutAllocations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoomWithoutAllocations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoomWithoutAllocations' from JSON`,
  );
}
