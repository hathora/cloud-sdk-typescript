/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  MetricValue,
  MetricValue$inboundSchema,
  MetricValue$Outbound,
  MetricValue$outboundSchema,
} from "./metricvalue.js";

export type ProcessMetricsData = {
  activeConnections?: Array<MetricValue> | undefined;
  totalEgress?: Array<MetricValue> | undefined;
  rateEgress?: Array<MetricValue> | undefined;
  memory?: Array<MetricValue> | undefined;
  cpu?: Array<MetricValue> | undefined;
};

/** @internal */
export const ProcessMetricsData$inboundSchema: z.ZodType<
  ProcessMetricsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  activeConnections: z.array(MetricValue$inboundSchema).optional(),
  totalEgress: z.array(MetricValue$inboundSchema).optional(),
  rateEgress: z.array(MetricValue$inboundSchema).optional(),
  memory: z.array(MetricValue$inboundSchema).optional(),
  cpu: z.array(MetricValue$inboundSchema).optional(),
});

/** @internal */
export type ProcessMetricsData$Outbound = {
  activeConnections?: Array<MetricValue$Outbound> | undefined;
  totalEgress?: Array<MetricValue$Outbound> | undefined;
  rateEgress?: Array<MetricValue$Outbound> | undefined;
  memory?: Array<MetricValue$Outbound> | undefined;
  cpu?: Array<MetricValue$Outbound> | undefined;
};

/** @internal */
export const ProcessMetricsData$outboundSchema: z.ZodType<
  ProcessMetricsData$Outbound,
  z.ZodTypeDef,
  ProcessMetricsData
> = z.object({
  activeConnections: z.array(MetricValue$outboundSchema).optional(),
  totalEgress: z.array(MetricValue$outboundSchema).optional(),
  rateEgress: z.array(MetricValue$outboundSchema).optional(),
  memory: z.array(MetricValue$outboundSchema).optional(),
  cpu: z.array(MetricValue$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProcessMetricsData$ {
  /** @deprecated use `ProcessMetricsData$inboundSchema` instead. */
  export const inboundSchema = ProcessMetricsData$inboundSchema;
  /** @deprecated use `ProcessMetricsData$outboundSchema` instead. */
  export const outboundSchema = ProcessMetricsData$outboundSchema;
  /** @deprecated use `ProcessMetricsData$Outbound` instead. */
  export type Outbound = ProcessMetricsData$Outbound;
}
