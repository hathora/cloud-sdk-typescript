/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Organization,
  Organization$inboundSchema,
  Organization$Outbound,
  Organization$outboundSchema,
} from "./organization.js";

export type OrgsPage = {
  orgs: Array<Organization>;
};

/** @internal */
export const OrgsPage$inboundSchema: z.ZodType<
  OrgsPage,
  z.ZodTypeDef,
  unknown
> = z.object({
  orgs: z.array(Organization$inboundSchema),
});

/** @internal */
export type OrgsPage$Outbound = {
  orgs: Array<Organization$Outbound>;
};

/** @internal */
export const OrgsPage$outboundSchema: z.ZodType<
  OrgsPage$Outbound,
  z.ZodTypeDef,
  OrgsPage
> = z.object({
  orgs: z.array(Organization$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrgsPage$ {
  /** @deprecated use `OrgsPage$inboundSchema` instead. */
  export const inboundSchema = OrgsPage$inboundSchema;
  /** @deprecated use `OrgsPage$outboundSchema` instead. */
  export const outboundSchema = OrgsPage$outboundSchema;
  /** @deprecated use `OrgsPage$Outbound` instead. */
  export type Outbound = OrgsPage$Outbound;
}

export function orgsPageToJSON(orgsPage: OrgsPage): string {
  return JSON.stringify(OrgsPage$outboundSchema.parse(orgsPage));
}

export function orgsPageFromJSON(
  jsonString: string,
): SafeParseResult<OrgsPage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrgsPage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrgsPage' from JSON`,
  );
}
