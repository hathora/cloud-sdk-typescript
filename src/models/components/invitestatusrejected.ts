/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum InviteStatusRejectedType {
    Rejected = "rejected",
}

export type InviteStatusRejected = {
    /**
     * System generated unique identifier for a user. Not guaranteed to have a specific format.
     */
    userId: string;
    type: InviteStatusRejectedType;
};

/** @internal */
export const InviteStatusRejectedType$: z.ZodNativeEnum<typeof InviteStatusRejectedType> =
    z.nativeEnum(InviteStatusRejectedType);

/** @internal */
export namespace InviteStatusRejected$ {
    export type Inbound = {
        userId: string;
        type: InviteStatusRejectedType;
    };

    export const inboundSchema: z.ZodType<InviteStatusRejected, z.ZodTypeDef, Inbound> = z
        .object({
            userId: z.string(),
            type: InviteStatusRejectedType$,
        })
        .transform((v) => {
            return {
                userId: v.userId,
                type: v.type,
            };
        });

    export type Outbound = {
        userId: string;
        type: InviteStatusRejectedType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InviteStatusRejected> = z
        .object({
            userId: z.string(),
            type: InviteStatusRejectedType$,
        })
        .transform((v) => {
            return {
                userId: v.userId,
                type: v.type,
            };
        });
}
