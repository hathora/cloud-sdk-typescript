/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RoomAllocation, RoomAllocation$ } from "./roomallocation.js";
import { RoomStatus, RoomStatus$ } from "./roomstatus.js";
import * as z from "zod";

/**
 * Metadata on an allocated instance of a room.
 */
export type RoomCurrentAllocation = {
    unscheduledAt: Date | null;
    scheduledAt: Date;
    /**
     * System generated unique identifier to a runtime instance of your game server.
     */
    processId: string;
    /**
     * System generated unique identifier to an allocated instance of a room.
     */
    roomAllocationId: string;
};

/**
 * A room object represents a game session or match.
 */
export type Room = {
    currentAllocation: RoomCurrentAllocation | null;
    /**
     * The allocation status of a room.
     *
     * @remarks
     *
     * `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
     *
     * `active`: ready to accept connections
     *
     * `destroyed`: all associated metadata is deleted
     */
    status: RoomStatus;
    allocations: Array<RoomAllocation>;
    roomConfig?: string | null | undefined;
    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     *
     * @remarks
     * Note: error will be returned if `roomId` is not globally unique.
     */
    roomId: string;
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
};

/** @internal */
export namespace RoomCurrentAllocation$ {
    export const inboundSchema: z.ZodType<RoomCurrentAllocation, z.ZodTypeDef, unknown> = z.object({
        unscheduledAt: z.nullable(
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
        ),
        scheduledAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        processId: z.string(),
        roomAllocationId: z.string(),
    });

    export type Outbound = {
        unscheduledAt: string | null;
        scheduledAt: string;
        processId: string;
        roomAllocationId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RoomCurrentAllocation> =
        z.object({
            unscheduledAt: z.nullable(z.date().transform((v) => v.toISOString())),
            scheduledAt: z.date().transform((v) => v.toISOString()),
            processId: z.string(),
            roomAllocationId: z.string(),
        });
}

/** @internal */
export namespace Room$ {
    export const inboundSchema: z.ZodType<Room, z.ZodTypeDef, unknown> = z.object({
        currentAllocation: z.nullable(z.lazy(() => RoomCurrentAllocation$.inboundSchema)),
        status: RoomStatus$.inboundSchema,
        allocations: z.array(RoomAllocation$.inboundSchema),
        roomConfig: z.nullable(z.string()).optional(),
        roomId: z.string(),
        appId: z.string(),
    });

    export type Outbound = {
        currentAllocation: RoomCurrentAllocation$.Outbound | null;
        status: string;
        allocations: Array<RoomAllocation$.Outbound>;
        roomConfig?: string | null | undefined;
        roomId: string;
        appId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Room> = z.object({
        currentAllocation: z.nullable(z.lazy(() => RoomCurrentAllocation$.outboundSchema)),
        status: RoomStatus$.outboundSchema,
        allocations: z.array(RoomAllocation$.outboundSchema),
        roomConfig: z.nullable(z.string()).optional(),
        roomId: z.string(),
        appId: z.string(),
    });
}
