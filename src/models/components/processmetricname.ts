/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

/**
 * Available metrics to query over time.
 */
export const ProcessMetricName = {
  Cpu: "cpu",
  Memory: "memory",
  RateEgress: "rateEgress",
  TotalEgress: "totalEgress",
  ActiveConnections: "activeConnections",
} as const;
/**
 * Available metrics to query over time.
 */
export type ProcessMetricName = OpenEnum<typeof ProcessMetricName>;

/** @internal */
export const ProcessMetricName$inboundSchema: z.ZodType<
  ProcessMetricName,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ProcessMetricName),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ProcessMetricName$outboundSchema: z.ZodType<
  ProcessMetricName,
  z.ZodTypeDef,
  ProcessMetricName
> = z.union([
  z.nativeEnum(ProcessMetricName),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProcessMetricName$ {
  /** @deprecated use `ProcessMetricName$inboundSchema` instead. */
  export const inboundSchema = ProcessMetricName$inboundSchema;
  /** @deprecated use `ProcessMetricName$outboundSchema` instead. */
  export const outboundSchema = ProcessMetricName$outboundSchema;
}
