/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import * as z from "zod";

/**
 * The allocation status of a room.
 *
 * @remarks
 *
 * `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
 *
 * `active`: ready to accept connections
 *
 * `destroyed`: all associated metadata is deleted
 */
export const RoomStatus = {
    Scheduling: "scheduling",
    Active: "active",
    Destroyed: "destroyed",
} as const;
/**
 * The allocation status of a room.
 *
 * @remarks
 *
 * `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
 *
 * `active`: ready to accept connections
 *
 * `destroyed`: all associated metadata is deleted
 */
export type RoomStatus = OpenEnum<typeof RoomStatus>;

/** @internal */
export namespace RoomStatus$ {
    export const inboundSchema: z.ZodType<RoomStatus, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(RoomStatus),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(RoomStatus),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}
