/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { OrganizationInviteStatus, OrganizationInviteStatus$ } from "./organizationinvitestatus";
import * as z from "zod";

export type OrgPermission = {
    updatedAt: Date;
    createdAt: Date;
    status: OrganizationInviteStatus;
    userEmail: string;
    /**
     * System generated unique identifier for a user. Not guaranteed to have a specific format.
     */
    invitedBy: string;
    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    orgId: string;
};

/** @internal */
export namespace OrgPermission$ {
    export const inboundSchema: z.ZodType<OrgPermission, z.ZodTypeDef, unknown> = z.object({
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        status: OrganizationInviteStatus$.inboundSchema,
        userEmail: z.string(),
        invitedBy: z.string(),
        orgId: z.string(),
    });

    export type Outbound = {
        updatedAt: string;
        createdAt: string;
        status: OrganizationInviteStatus$.Outbound;
        userEmail: string;
        invitedBy: string;
        orgId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrgPermission> = z.object({
        updatedAt: z.date().transform((v) => v.toISOString()),
        createdAt: z.date().transform((v) => v.toISOString()),
        status: OrganizationInviteStatus$.outboundSchema,
        userEmail: z.string(),
        invitedBy: z.string(),
        orgId: z.string(),
    });
}
