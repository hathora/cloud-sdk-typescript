/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Type {
    Pending = "pending",
}

export type InviteStatusPending = {
    type: Type;
};

/** @internal */
export namespace Type$ {
    export const inboundSchema = z.nativeEnum(Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace InviteStatusPending$ {
    export const inboundSchema: z.ZodType<InviteStatusPending, z.ZodTypeDef, unknown> = z
        .object({
            type: Type$.inboundSchema,
        })
        .transform((v) => {
            return {
                type: v.type,
            };
        });

    export type Outbound = {
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InviteStatusPending> = z
        .object({
            type: Type$.outboundSchema,
        })
        .transform((v) => {
            return {
                type: v.type,
            };
        });
}
