/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types";
import * as z from "zod";

export const Type = {
    Pending: "pending",
} as const;
export type Type = OpenEnum<typeof Type>;

export type InviteStatusPending = {
    type: Type;
};

/** @internal */
export namespace Type$ {
    export const inboundSchema: z.ZodType<Type, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(Type),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema = z.union([
        z.nativeEnum(Type),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace InviteStatusPending$ {
    export const inboundSchema: z.ZodType<InviteStatusPending, z.ZodTypeDef, unknown> = z.object({
        type: Type$.inboundSchema,
    });

    export type Outbound = {
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InviteStatusPending> = z.object({
        type: Type$.outboundSchema,
    });
}
