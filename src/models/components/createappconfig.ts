/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthConfiguration,
  AuthConfiguration$inboundSchema,
  AuthConfiguration$Outbound,
  AuthConfiguration$outboundSchema,
} from "./authconfiguration.js";
import {
  LoadBalancerConfig,
  LoadBalancerConfig$inboundSchema,
  LoadBalancerConfig$Outbound,
  LoadBalancerConfig$outboundSchema,
} from "./loadbalancerconfig.js";

export type CreateAppConfig = {
  loadBalancer?: LoadBalancerConfig | undefined;
  /**
   * Configure [player authentication](https://hathora.dev/docs/backend-integrations/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
   */
  authConfiguration: AuthConfiguration;
  /**
   * Readable name for an application. Must be unique within an organization.
   */
  appName: string;
};

/** @internal */
export const CreateAppConfig$inboundSchema: z.ZodType<
  CreateAppConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  loadBalancer: LoadBalancerConfig$inboundSchema.optional(),
  authConfiguration: AuthConfiguration$inboundSchema,
  appName: z.string(),
});

/** @internal */
export type CreateAppConfig$Outbound = {
  loadBalancer?: LoadBalancerConfig$Outbound | undefined;
  authConfiguration: AuthConfiguration$Outbound;
  appName: string;
};

/** @internal */
export const CreateAppConfig$outboundSchema: z.ZodType<
  CreateAppConfig$Outbound,
  z.ZodTypeDef,
  CreateAppConfig
> = z.object({
  loadBalancer: LoadBalancerConfig$outboundSchema.optional(),
  authConfiguration: AuthConfiguration$outboundSchema,
  appName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAppConfig$ {
  /** @deprecated use `CreateAppConfig$inboundSchema` instead. */
  export const inboundSchema = CreateAppConfig$inboundSchema;
  /** @deprecated use `CreateAppConfig$outboundSchema` instead. */
  export const outboundSchema = CreateAppConfig$outboundSchema;
  /** @deprecated use `CreateAppConfig$Outbound` instead. */
  export type Outbound = CreateAppConfig$Outbound;
}

export function createAppConfigToJSON(
  createAppConfig: CreateAppConfig,
): string {
  return JSON.stringify(CreateAppConfig$outboundSchema.parse(createAppConfig));
}

export function createAppConfigFromJSON(
  jsonString: string,
): SafeParseResult<CreateAppConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAppConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAppConfig' from JSON`,
  );
}
