/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TransportType,
  TransportType$inboundSchema,
  TransportType$outboundSchema,
} from "./transporttype.js";

export const ActiveConnectionInfoStatus = {
  Active: "active",
} as const;
export type ActiveConnectionInfoStatus = OpenEnum<
  typeof ActiveConnectionInfoStatus
>;

export type ActiveConnectionInfo = {
  status: ActiveConnectionInfoStatus;
  /**
   * Transport type specifies the underlying communication protocol to the exposed port.
   */
  transportType: TransportType;
  port: number;
  host: string;
  /**
   * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
   *
   * @remarks
   * Note: error will be returned if `roomId` is not globally unique.
   */
  roomId: string;
};

/** @internal */
export const ActiveConnectionInfoStatus$inboundSchema: z.ZodType<
  ActiveConnectionInfoStatus,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(ActiveConnectionInfoStatus),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const ActiveConnectionInfoStatus$outboundSchema: z.ZodType<
  ActiveConnectionInfoStatus,
  z.ZodTypeDef,
  ActiveConnectionInfoStatus
> = z.union([
  z.nativeEnum(ActiveConnectionInfoStatus),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActiveConnectionInfoStatus$ {
  /** @deprecated use `ActiveConnectionInfoStatus$inboundSchema` instead. */
  export const inboundSchema = ActiveConnectionInfoStatus$inboundSchema;
  /** @deprecated use `ActiveConnectionInfoStatus$outboundSchema` instead. */
  export const outboundSchema = ActiveConnectionInfoStatus$outboundSchema;
}

/** @internal */
export const ActiveConnectionInfo$inboundSchema: z.ZodType<
  ActiveConnectionInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: ActiveConnectionInfoStatus$inboundSchema,
  transportType: TransportType$inboundSchema,
  port: z.number(),
  host: z.string(),
  roomId: z.string(),
});

/** @internal */
export type ActiveConnectionInfo$Outbound = {
  status: string;
  transportType: string;
  port: number;
  host: string;
  roomId: string;
};

/** @internal */
export const ActiveConnectionInfo$outboundSchema: z.ZodType<
  ActiveConnectionInfo$Outbound,
  z.ZodTypeDef,
  ActiveConnectionInfo
> = z.object({
  status: ActiveConnectionInfoStatus$outboundSchema,
  transportType: TransportType$outboundSchema,
  port: z.number(),
  host: z.string(),
  roomId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActiveConnectionInfo$ {
  /** @deprecated use `ActiveConnectionInfo$inboundSchema` instead. */
  export const inboundSchema = ActiveConnectionInfo$inboundSchema;
  /** @deprecated use `ActiveConnectionInfo$outboundSchema` instead. */
  export const outboundSchema = ActiveConnectionInfo$outboundSchema;
  /** @deprecated use `ActiveConnectionInfo$Outbound` instead. */
  export type Outbound = ActiveConnectionInfo$Outbound;
}

export function activeConnectionInfoToJSON(
  activeConnectionInfo: ActiveConnectionInfo,
): string {
  return JSON.stringify(
    ActiveConnectionInfo$outboundSchema.parse(activeConnectionInfo),
  );
}

export function activeConnectionInfoFromJSON(
  jsonString: string,
): SafeParseResult<ActiveConnectionInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActiveConnectionInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActiveConnectionInfo' from JSON`,
  );
}
