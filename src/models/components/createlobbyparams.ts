/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LobbyVisibility,
  LobbyVisibility$inboundSchema,
  LobbyVisibility$outboundSchema,
} from "./lobbyvisibility.js";
import {
  Region,
  Region$inboundSchema,
  Region$outboundSchema,
} from "./region.js";

export type CreateLobbyParams = {
  /**
   * Types of lobbies a player can create.
   *
   * @remarks
   *
   * `private`: the player who created the room must share the roomId with their friends
   *
   * `public`: visible in the public lobby list, anyone can join
   *
   * `local`: for testing with a server running locally
   */
  visibility: LobbyVisibility;
  /**
   * User input to initialize the game state. Object must be smaller than 64KB.
   */
  initialConfig?: any | undefined;
  region: Region;
};

/** @internal */
export const CreateLobbyParams$inboundSchema: z.ZodType<
  CreateLobbyParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: LobbyVisibility$inboundSchema,
  initialConfig: z.any().optional(),
  region: Region$inboundSchema,
});

/** @internal */
export type CreateLobbyParams$Outbound = {
  visibility: string;
  initialConfig?: any | undefined;
  region: string;
};

/** @internal */
export const CreateLobbyParams$outboundSchema: z.ZodType<
  CreateLobbyParams$Outbound,
  z.ZodTypeDef,
  CreateLobbyParams
> = z.object({
  visibility: LobbyVisibility$outboundSchema,
  initialConfig: z.any().optional(),
  region: Region$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLobbyParams$ {
  /** @deprecated use `CreateLobbyParams$inboundSchema` instead. */
  export const inboundSchema = CreateLobbyParams$inboundSchema;
  /** @deprecated use `CreateLobbyParams$outboundSchema` instead. */
  export const outboundSchema = CreateLobbyParams$outboundSchema;
  /** @deprecated use `CreateLobbyParams$Outbound` instead. */
  export type Outbound = CreateLobbyParams$Outbound;
}

export function createLobbyParamsToJSON(
  createLobbyParams: CreateLobbyParams,
): string {
  return JSON.stringify(
    CreateLobbyParams$outboundSchema.parse(createLobbyParams),
  );
}

export function createLobbyParamsFromJSON(
  jsonString: string,
): SafeParseResult<CreateLobbyParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLobbyParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLobbyParams' from JSON`,
  );
}
