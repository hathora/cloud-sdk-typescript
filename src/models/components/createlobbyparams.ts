/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LobbyInitialConfig, LobbyInitialConfig$ } from "./lobbyinitialconfig";
import { LobbyVisibility, LobbyVisibility$ } from "./lobbyvisibility";
import { Region, Region$ } from "./region";
import * as z from "zod";

export type CreateLobbyParams = {
    /**
     * Types of lobbies a player can create.
     *
     * @remarks
     *
     * `private`: the player who created the room must share the roomId with their friends
     *
     * `public`: visible in the public lobby list, anyone can join
     *
     * `local`: for testing with a server running locally
     */
    visibility: LobbyVisibility;
    /**
     * User input to initialize the game state. Object must be smaller than 64KB.
     */
    initialConfig: LobbyInitialConfig;
    region: Region;
};

/** @internal */
export namespace CreateLobbyParams$ {
    export type Inbound = {
        visibility: LobbyVisibility;
        initialConfig: LobbyInitialConfig$.Inbound;
        region: Region;
    };

    export const inboundSchema: z.ZodType<CreateLobbyParams, z.ZodTypeDef, Inbound> = z
        .object({
            visibility: LobbyVisibility$,
            initialConfig: LobbyInitialConfig$.inboundSchema,
            region: Region$,
        })
        .transform((v) => {
            return {
                visibility: v.visibility,
                initialConfig: v.initialConfig,
                region: v.region,
            };
        });

    export type Outbound = {
        visibility: LobbyVisibility;
        initialConfig: LobbyInitialConfig$.Outbound;
        region: Region;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateLobbyParams> = z
        .object({
            visibility: LobbyVisibility$,
            initialConfig: LobbyInitialConfig$.outboundSchema,
            region: Region$,
        })
        .transform((v) => {
            return {
                visibility: v.visibility,
                initialConfig: v.initialConfig,
                region: v.region,
            };
        });
}
