/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LobbyInitialConfig, LobbyInitialConfig$ } from "./lobbyinitialconfig";
import { LobbyVisibility, LobbyVisibility$ } from "./lobbyvisibility";
import { Region, Region$ } from "./region";
import * as z from "zod";

/**
 * JSON blob to store metadata for a room. Must be smaller than 1MB.
 */
export type State = {};

/**
 * A lobby object allows you to store and manage metadata for your rooms.
 */
export type Lobby = {
    shortCode: string | null;
    /**
     * JSON blob to store metadata for a room. Must be smaller than 1MB.
     */
    state?: State | null | undefined;
    /**
     * User input to initialize the game state. Object must be smaller than 64KB.
     */
    initialConfig: LobbyInitialConfig;
    /**
     * When the lobby was created.
     */
    createdAt: Date;
    /**
     * UserId or email address for the user that created the lobby.
     */
    createdBy: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    local: boolean;
    /**
     * Types of lobbies a player can create.
     *
     * @remarks
     *
     * `private`: the player who created the room must share the roomId with their friends
     *
     * `public`: visible in the public lobby list, anyone can join
     *
     * `local`: for testing with a server running locally
     */
    visibility: LobbyVisibility;
    region: Region;
    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     *
     * @remarks
     * Note: error will be returned if `roomId` is not globally unique.
     */
    roomId: string;
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
};

/** @internal */
export namespace State$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<State, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, State> = z.object({});
}

/** @internal */
export namespace Lobby$ {
    export type Inbound = {
        shortCode: string | null;
        state?: State$.Inbound | null | undefined;
        initialConfig: LobbyInitialConfig$.Inbound;
        createdAt: string;
        createdBy: string;
        local: boolean;
        visibility: LobbyVisibility;
        region: Region;
        roomId: string;
        appId: string;
    };

    export const inboundSchema: z.ZodType<Lobby, z.ZodTypeDef, Inbound> = z
        .object({
            shortCode: z.nullable(z.string()),
            state: z.nullable(z.lazy(() => State$.inboundSchema)).optional(),
            initialConfig: LobbyInitialConfig$.inboundSchema,
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            createdBy: z.string(),
            local: z.boolean(),
            visibility: LobbyVisibility$,
            region: Region$,
            roomId: z.string(),
            appId: z.string(),
        })
        .transform((v) => {
            return {
                shortCode: v.shortCode,
                ...(v.state === undefined ? null : { state: v.state }),
                initialConfig: v.initialConfig,
                createdAt: v.createdAt,
                createdBy: v.createdBy,
                local: v.local,
                visibility: v.visibility,
                region: v.region,
                roomId: v.roomId,
                appId: v.appId,
            };
        });

    export type Outbound = {
        shortCode: string | null;
        state?: State$.Outbound | null | undefined;
        initialConfig: LobbyInitialConfig$.Outbound;
        createdAt: string;
        createdBy: string;
        local: boolean;
        visibility: LobbyVisibility;
        region: Region;
        roomId: string;
        appId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Lobby> = z
        .object({
            shortCode: z.nullable(z.string()),
            state: z.nullable(z.lazy(() => State$.outboundSchema)).optional(),
            initialConfig: LobbyInitialConfig$.outboundSchema,
            createdAt: z.date().transform((v) => v.toISOString()),
            createdBy: z.string(),
            local: z.boolean(),
            visibility: LobbyVisibility$,
            region: Region$,
            roomId: z.string(),
            appId: z.string(),
        })
        .transform((v) => {
            return {
                shortCode: v.shortCode,
                ...(v.state === undefined ? null : { state: v.state }),
                initialConfig: v.initialConfig,
                createdAt: v.createdAt,
                createdBy: v.createdBy,
                local: v.local,
                visibility: v.visibility,
                region: v.region,
                roomId: v.roomId,
                appId: v.appId,
            };
        });
}
