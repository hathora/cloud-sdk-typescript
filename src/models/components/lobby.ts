/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    LobbyVisibility,
    LobbyVisibility$inboundSchema,
    LobbyVisibility$outboundSchema,
} from "./lobbyvisibility.js";
import { Region, Region$inboundSchema, Region$outboundSchema } from "./region.js";
import * as z from "zod";

/**
 * UserId or email address for the user that created the lobby.
 */
export type CreatedBy = string | number;

/**
 * A lobby object allows you to store and manage metadata for your rooms.
 */
export type Lobby = {
    shortCode: string | null;
    /**
     * JSON blob to store metadata for a room. Must be smaller than 1MB.
     */
    state?: any | null | undefined;
    /**
     * User input to initialize the game state. Object must be smaller than 64KB.
     */
    initialConfig?: any | undefined;
    /**
     * When the lobby was created.
     */
    createdAt: Date;
    /**
     * UserId or email address for the user that created the lobby.
     */
    createdBy: string | number;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    local: boolean;
    /**
     * Types of lobbies a player can create.
     *
     * @remarks
     *
     * `private`: the player who created the room must share the roomId with their friends
     *
     * `public`: visible in the public lobby list, anyone can join
     *
     * `local`: for testing with a server running locally
     */
    visibility: LobbyVisibility;
    region: Region;
    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     *
     * @remarks
     * Note: error will be returned if `roomId` is not globally unique.
     */
    roomId: string;
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
};

/** @internal */
export const CreatedBy$inboundSchema: z.ZodType<CreatedBy, z.ZodTypeDef, unknown> = z.union([
    z.string(),
    z.number(),
]);

/** @internal */
export type CreatedBy$Outbound = string | number;

/** @internal */
export const CreatedBy$outboundSchema: z.ZodType<CreatedBy$Outbound, z.ZodTypeDef, CreatedBy> =
    z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatedBy$ {
    /** @deprecated use `CreatedBy$inboundSchema` instead. */
    export const inboundSchema = CreatedBy$inboundSchema;
    /** @deprecated use `CreatedBy$outboundSchema` instead. */
    export const outboundSchema = CreatedBy$outboundSchema;
    /** @deprecated use `CreatedBy$Outbound` instead. */
    export type Outbound = CreatedBy$Outbound;
}

/** @internal */
export const Lobby$inboundSchema: z.ZodType<Lobby, z.ZodTypeDef, unknown> = z.object({
    shortCode: z.nullable(z.string()),
    state: z.nullable(z.any()).optional(),
    initialConfig: z.any().optional(),
    createdAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    createdBy: z.union([z.string(), z.number()]),
    local: z.boolean(),
    visibility: LobbyVisibility$inboundSchema,
    region: Region$inboundSchema,
    roomId: z.string(),
    appId: z.string(),
});

/** @internal */
export type Lobby$Outbound = {
    shortCode: string | null;
    state?: any | null | undefined;
    initialConfig?: any | undefined;
    createdAt: string;
    createdBy: string | number;
    local: boolean;
    visibility: string;
    region: string;
    roomId: string;
    appId: string;
};

/** @internal */
export const Lobby$outboundSchema: z.ZodType<Lobby$Outbound, z.ZodTypeDef, Lobby> = z.object({
    shortCode: z.nullable(z.string()),
    state: z.nullable(z.any()).optional(),
    initialConfig: z.any().optional(),
    createdAt: z.date().transform((v) => v.toISOString()),
    createdBy: z.union([z.string(), z.number()]),
    local: z.boolean(),
    visibility: LobbyVisibility$outboundSchema,
    region: Region$outboundSchema,
    roomId: z.string(),
    appId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Lobby$ {
    /** @deprecated use `Lobby$inboundSchema` instead. */
    export const inboundSchema = Lobby$inboundSchema;
    /** @deprecated use `Lobby$outboundSchema` instead. */
    export const outboundSchema = Lobby$outboundSchema;
    /** @deprecated use `Lobby$Outbound` instead. */
    export type Outbound = Lobby$Outbound;
}
