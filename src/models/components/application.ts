/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AuthConfiguration, AuthConfiguration$ } from "./authconfiguration";
import * as z from "zod";

/**
 * An application object is the top level namespace for the game server.
 */
export type Application = {
    /**
     * UserId or email address for the user that deleted the application.
     */
    deletedBy: string | null;
    /**
     * When the application was deleted.
     */
    deletedAt: Date | null;
    /**
     * When the application was created.
     */
    createdAt: Date;
    /**
     * UserId or email address for the user that created the application.
     */
    createdBy: string;
    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    orgId: string;
    /**
     * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    authConfiguration: AuthConfiguration;
    /**
     * Secret that is used for identity and access management.
     */
    appSecret: string;
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
    /**
     * Readable name for an application. Must be unique within an organization.
     */
    appName: string;
};

/** @internal */
export namespace Application$ {
    export type Inbound = {
        deletedBy: string | null;
        deletedAt: string | null;
        createdAt: string;
        createdBy: string;
        orgId: string;
        authConfiguration: AuthConfiguration$.Inbound;
        appSecret: string;
        appId: string;
        appName: string;
    };

    export const inboundSchema: z.ZodType<Application, z.ZodTypeDef, Inbound> = z
        .object({
            deletedBy: z.nullable(z.string()),
            deletedAt: z.nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            ),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            createdBy: z.string(),
            orgId: z.string(),
            authConfiguration: AuthConfiguration$.inboundSchema,
            appSecret: z.string(),
            appId: z.string(),
            appName: z.string(),
        })
        .transform((v) => {
            return {
                deletedBy: v.deletedBy,
                deletedAt: v.deletedAt,
                createdAt: v.createdAt,
                createdBy: v.createdBy,
                orgId: v.orgId,
                authConfiguration: v.authConfiguration,
                appSecret: v.appSecret,
                appId: v.appId,
                appName: v.appName,
            };
        });

    export type Outbound = {
        deletedBy: string | null;
        deletedAt: string | null;
        createdAt: string;
        createdBy: string;
        orgId: string;
        authConfiguration: AuthConfiguration$.Outbound;
        appSecret: string;
        appId: string;
        appName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Application> = z
        .object({
            deletedBy: z.nullable(z.string()),
            deletedAt: z.nullable(z.date().transform((v) => v.toISOString())),
            createdAt: z.date().transform((v) => v.toISOString()),
            createdBy: z.string(),
            orgId: z.string(),
            authConfiguration: AuthConfiguration$.outboundSchema,
            appSecret: z.string(),
            appId: z.string(),
            appName: z.string(),
        })
        .transform((v) => {
            return {
                deletedBy: v.deletedBy,
                deletedAt: v.deletedAt,
                createdAt: v.createdAt,
                createdBy: v.createdBy,
                orgId: v.orgId,
                authConfiguration: v.authConfiguration,
                appSecret: v.appSecret,
                appId: v.appId,
                appName: v.appName,
            };
        });
}
