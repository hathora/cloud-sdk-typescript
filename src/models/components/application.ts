/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  AuthConfiguration,
  AuthConfiguration$inboundSchema,
  AuthConfiguration$Outbound,
  AuthConfiguration$outboundSchema,
} from "./authconfiguration.js";

/**
 * An application object is the top level namespace for the game server.
 */
export type Application = {
  /**
   * The email address or token id for the user that deleted the application.
   */
  deletedBy: string | null;
  /**
   * When the application was deleted.
   */
  deletedAt: Date | null;
  /**
   * When the application was created.
   */
  createdAt: Date;
  createdBy: string;
  /**
   * System generated unique identifier for an organization. Not guaranteed to have a specific format.
   */
  orgId: string;
  /**
   * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
   */
  authConfiguration: AuthConfiguration;
  /**
   * Secret that is used for identity and access management.
   */
  appSecret: string;
  /**
   * System generated unique identifier for an application.
   */
  appId: string;
  /**
   * Readable name for an application. Must be unique within an organization.
   */
  appName: string;
};

/** @internal */
export const Application$inboundSchema: z.ZodType<
  Application,
  z.ZodTypeDef,
  unknown
> = z.object({
  deletedBy: z.nullable(z.string()),
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  orgId: z.string(),
  authConfiguration: AuthConfiguration$inboundSchema,
  appSecret: z.string(),
  appId: z.string(),
  appName: z.string(),
});

/** @internal */
export type Application$Outbound = {
  deletedBy: string | null;
  deletedAt: string | null;
  createdAt: string;
  createdBy: string;
  orgId: string;
  authConfiguration: AuthConfiguration$Outbound;
  appSecret: string;
  appId: string;
  appName: string;
};

/** @internal */
export const Application$outboundSchema: z.ZodType<
  Application$Outbound,
  z.ZodTypeDef,
  Application
> = z.object({
  deletedBy: z.nullable(z.string()),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())),
  createdAt: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  orgId: z.string(),
  authConfiguration: AuthConfiguration$outboundSchema,
  appSecret: z.string(),
  appId: z.string(),
  appName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Application$ {
  /** @deprecated use `Application$inboundSchema` instead. */
  export const inboundSchema = Application$inboundSchema;
  /** @deprecated use `Application$outboundSchema` instead. */
  export const outboundSchema = Application$outboundSchema;
  /** @deprecated use `Application$Outbound` instead. */
  export type Outbound = Application$Outbound;
}
