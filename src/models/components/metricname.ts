/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import * as z from "zod";

/**
 * Available metrics to query over time.
 */
export const MetricName = {
    Cpu: "cpu",
    Memory: "memory",
    RateEgress: "rate_egress",
    TotalEgress: "total_egress",
    ActiveConnections: "active_connections",
} as const;
/**
 * Available metrics to query over time.
 */
export type MetricName = OpenEnum<typeof MetricName>;

/** @internal */
export const MetricName$inboundSchema: z.ZodType<MetricName, z.ZodTypeDef, unknown> = z.union([
    z.nativeEnum(MetricName),
    z.string().transform(catchUnrecognizedEnum),
]);

/** @internal */
export const MetricName$outboundSchema: z.ZodType<MetricName, z.ZodTypeDef, MetricName> = z.union([
    z.nativeEnum(MetricName),
    z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricName$ {
    /** @deprecated use `MetricName$inboundSchema` instead. */
    export const inboundSchema = MetricName$inboundSchema;
    /** @deprecated use `MetricName$outboundSchema` instead. */
    export const outboundSchema = MetricName$outboundSchema;
}
