/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BuildPart,
  BuildPart$inboundSchema,
  BuildPart$Outbound,
  BuildPart$outboundSchema,
} from "./buildpart.js";
import {
  BuildStatus,
  BuildStatus$inboundSchema,
  BuildStatus$outboundSchema,
} from "./buildstatus.js";

/**
 * A build represents a game server artifact and its associated metadata.
 */
export type CreatedBuildV3WithMultipartUrls = {
  contentHash?: string | undefined;
  /**
   * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV2/operation/GetBuildInfo).
   */
  buildTag?: string | undefined;
  /**
   * The size (in bytes) of the Docker image built by Hathora.
   */
  imageSize: number;
  status: BuildStatus;
  /**
   * When the build was deleted.
   */
  deletedAt: Date | null;
  /**
   * When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild) finished executing.
   */
  finishedAt: Date | null;
  /**
   * When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild) is called.
   */
  startedAt: Date | null;
  /**
   * When [`CreateBuild()`](https://hathora.dev/api#tag/BuildV2/operation/CreateBuild) is called.
   */
  createdAt: Date;
  createdBy: string;
  /**
   * System generated id for a build. Can also be user defined when creating a build.
   */
  buildId: string;
  /**
   * System generated unique identifier for an organization. Not guaranteed to have a specific format.
   */
  orgId: string;
  completeUploadPostRequestUrl: string;
  maxChunkSize: number;
  uploadParts: Array<BuildPart>;
};

/** @internal */
export const CreatedBuildV3WithMultipartUrls$inboundSchema: z.ZodType<
  CreatedBuildV3WithMultipartUrls,
  z.ZodTypeDef,
  unknown
> = z.object({
  contentHash: z.string().optional(),
  buildTag: z.string().optional(),
  imageSize: z.number().int(),
  status: BuildStatus$inboundSchema,
  deletedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  finishedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  startedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  createdBy: z.string(),
  buildId: z.string(),
  orgId: z.string(),
  completeUploadPostRequestUrl: z.string(),
  maxChunkSize: z.number(),
  uploadParts: z.array(BuildPart$inboundSchema),
});

/** @internal */
export type CreatedBuildV3WithMultipartUrls$Outbound = {
  contentHash?: string | undefined;
  buildTag?: string | undefined;
  imageSize: number;
  status: string;
  deletedAt: string | null;
  finishedAt: string | null;
  startedAt: string | null;
  createdAt: string;
  createdBy: string;
  buildId: string;
  orgId: string;
  completeUploadPostRequestUrl: string;
  maxChunkSize: number;
  uploadParts: Array<BuildPart$Outbound>;
};

/** @internal */
export const CreatedBuildV3WithMultipartUrls$outboundSchema: z.ZodType<
  CreatedBuildV3WithMultipartUrls$Outbound,
  z.ZodTypeDef,
  CreatedBuildV3WithMultipartUrls
> = z.object({
  contentHash: z.string().optional(),
  buildTag: z.string().optional(),
  imageSize: z.number().int(),
  status: BuildStatus$outboundSchema,
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())),
  finishedAt: z.nullable(z.date().transform(v => v.toISOString())),
  startedAt: z.nullable(z.date().transform(v => v.toISOString())),
  createdAt: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  buildId: z.string(),
  orgId: z.string(),
  completeUploadPostRequestUrl: z.string(),
  maxChunkSize: z.number(),
  uploadParts: z.array(BuildPart$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatedBuildV3WithMultipartUrls$ {
  /** @deprecated use `CreatedBuildV3WithMultipartUrls$inboundSchema` instead. */
  export const inboundSchema = CreatedBuildV3WithMultipartUrls$inboundSchema;
  /** @deprecated use `CreatedBuildV3WithMultipartUrls$outboundSchema` instead. */
  export const outboundSchema = CreatedBuildV3WithMultipartUrls$outboundSchema;
  /** @deprecated use `CreatedBuildV3WithMultipartUrls$Outbound` instead. */
  export type Outbound = CreatedBuildV3WithMultipartUrls$Outbound;
}

export function createdBuildV3WithMultipartUrlsToJSON(
  createdBuildV3WithMultipartUrls: CreatedBuildV3WithMultipartUrls,
): string {
  return JSON.stringify(
    CreatedBuildV3WithMultipartUrls$outboundSchema.parse(
      createdBuildV3WithMultipartUrls,
    ),
  );
}

export function createdBuildV3WithMultipartUrlsFromJSON(
  jsonString: string,
): SafeParseResult<CreatedBuildV3WithMultipartUrls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatedBuildV3WithMultipartUrls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatedBuildV3WithMultipartUrls' from JSON`,
  );
}
