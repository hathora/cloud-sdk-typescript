/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Organization = {
    isSingleTenant: boolean;
    stripeCustomerId: string;
    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    orgId: string;
};

/** @internal */
export namespace Organization$ {
    export const inboundSchema: z.ZodType<Organization, z.ZodTypeDef, unknown> = z
        .object({
            isSingleTenant: z.boolean(),
            stripeCustomerId: z.string(),
            orgId: z.string(),
        })
        .transform((v) => {
            return {
                isSingleTenant: v.isSingleTenant,
                stripeCustomerId: v.stripeCustomerId,
                orgId: v.orgId,
            };
        });

    export type Outbound = {
        isSingleTenant: boolean;
        stripeCustomerId: string;
        orgId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Organization> = z
        .object({
            isSingleTenant: z.boolean(),
            stripeCustomerId: z.string(),
            orgId: z.string(),
        })
        .transform((v) => {
            return {
                isSingleTenant: v.isSingleTenant,
                stripeCustomerId: v.stripeCustomerId,
                orgId: v.orgId,
            };
        });
}
