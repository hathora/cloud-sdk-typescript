/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../internal/utils";
import { ContainerPort } from "./containerport";
import { PlanName } from "./planname";
import { Expose, Transform, Type } from "class-transformer";

export class Env extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value: string;
}

/**
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export enum DeploymentTransportType {
    Tcp = "tcp",
    Udp = "udp",
    Tls = "tls",
}

/**
 * Deployment is a versioned configuration for a build that describes runtime behavior.
 */
export class Deployment extends SpeakeasyBase {
    /**
     * Additional ports your server listens on.
     */
    @SpeakeasyMetadata({ elemType: ContainerPort })
    @Expose({ name: "additionalContainerPorts" })
    @Type(() => ContainerPort)
    additionalContainerPorts: ContainerPort[];

    /**
     * System generated unique identifier for an application.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "appId" })
    appId: string;

    /**
     * System generated id for a build. Increments by 1.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "buildId" })
    buildId: number;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "containerPort" })
    containerPort: number;

    /**
     * When the deployment was created.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt: Date;

    /**
     * Email address for the user that created the deployment.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "createdBy" })
    createdBy: string;

    /**
     * A container port object represents the transport configruations for how your server will listen.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "defaultContainerPort" })
    @Type(() => ContainerPort)
    defaultContainerPort: ContainerPort;

    /**
     * System generated id for a deployment. Increments by 1.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "deploymentId" })
    deploymentId: number;

    /**
     * The environment variable that our process will have access to at runtime.
     */
    @SpeakeasyMetadata({ elemType: Env })
    @Expose({ name: "env" })
    @Type(() => Env)
    env: Env[];

    /**
     * A plan defines how much CPU and memory is required to run an instance of your game server.
     *
     * @remarks
     *
     * `tiny`: shared core, 1gb memory
     *
     * `small`: 1 core, 2gb memory
     *
     * `medium`: 2 core, 4gb memory
     *
     * `large`: 4 core, 8gb memory
     */
    @SpeakeasyMetadata()
    @Expose({ name: "planName" })
    planName: PlanName;

    /**
     * The number of cores allocated to your process.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "requestedCPU" })
    requestedCPU: number;

    /**
     * The amount of memory allocated to your process.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "requestedMemoryMB" })
    requestedMemoryMB: number;

    /**
     * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "roomsPerProcess" })
    roomsPerProcess: number;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "transportType" })
    transportType: DeploymentTransportType;
}
