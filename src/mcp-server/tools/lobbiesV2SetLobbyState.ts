/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { lobbiesV2SetLobbyState } from "../../funcs/lobbiesV2SetLobbyState.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  roomId: z.string(),
  setLobbyStateParams: components.SetLobbyStateParams$inboundSchema,
  appId: z.string().optional(),
};

export const tool$lobbiesV2SetLobbyState: ToolDefinition<typeof args> = {
  name: "lobbies-v2_set-lobby-state",
  description: `SetLobbyState

Set the state of a lobby. State is intended to be set by the server and must be smaller than 1MB. Use this endpoint to store match data like live player count to enforce max number of clients or persist end-game data (i.e. winner or final scores).`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await lobbiesV2SetLobbyState(
      client,
      args.roomId,
      args.setLobbyStateParams,
      args.appId,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
