/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { processesV1GetStoppedProcesses } from "../../funcs/processesV1GetStoppedProcesses.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  appId: z.string().optional(),
  region: components.Region$inboundSchema.optional(),
};

export const tool$processesV1GetStoppedProcesses: ToolDefinition<typeof args> =
  {
    name: "processes-v1-get-stopped-processes",
    description: `GetStoppedProcesses

Retrieve 10 most recently stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a \`region\`.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await processesV1GetStoppedProcesses(
        client,
        args.appId,
        args.region,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
