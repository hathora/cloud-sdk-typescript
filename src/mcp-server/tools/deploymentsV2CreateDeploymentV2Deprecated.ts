/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { deploymentsV2CreateDeploymentV2Deprecated } from "../../funcs/deploymentsV2CreateDeploymentV2Deprecated.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  buildId: z.number().int(),
  deploymentConfigV2: components.DeploymentConfigV2$inboundSchema,
  appId: z.string().optional(),
};

export const tool$deploymentsV2CreateDeploymentV2Deprecated: ToolDefinition<
  typeof args
> = {
  name: "deployments-v2_create-deployment-v2-deprecated",
  description: `CreateDeploymentV2Deprecated

Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment). Creating a new deployment means all new rooms created will use the latest deployment configuration, but existing games in progress will not be affected.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await deploymentsV2CreateDeploymentV2Deprecated(
      client,
      args.buildId,
      args.deploymentConfigV2,
      args.appId,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
