/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { buildsV3CreateBuild } from "../../funcs/buildsV3CreateBuild.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  createMultipartBuildParams:
    components.CreateMultipartBuildParams$inboundSchema,
  orgId: z.string().optional(),
};

export const tool$buildsV3CreateBuild: ToolDefinition<typeof args> = {
  name: "builds-v3_create-build",
  description: `CreateBuild

Creates a new [build](https://hathora.dev/docs/concepts/hathora-entities#build) with optional \`multipartUploadUrls\` that can be used to upload larger builds in parts before calling \`runBuild\`. Responds with a \`buildId\` that you must pass to [\`RunBuild()\`](https://hathora.dev/api#tag/BuildV1/operation/RunBuild) to build the game server artifact. You can optionally pass in a \`buildTag\` to associate an external version with a build.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await buildsV3CreateBuild(
      client,
      args.createMultipartBuildParams,
      args.orgId,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
